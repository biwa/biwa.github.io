{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Index UDB script Getting started API Angle2D Data GameConfiguration ImageInfo Line2D Linedef Map QueryOptions Sector Sidedef Thing Vector2D Vector3D Vertex Built-in libraries Pen","title":"Index"},{"location":"#index","text":"","title":"Index"},{"location":"#udb-script","text":"Getting started","title":"UDB script"},{"location":"#api","text":"Angle2D Data GameConfiguration ImageInfo Line2D Linedef Map QueryOptions Sector Sidedef Thing Vector2D Vector3D Vertex","title":"API"},{"location":"#built-in-libraries","text":"Pen","title":"Built-in libraries"},{"location":"Angle2D/","text":"Angle2D Static methods degToRad(deg) Converts degrees to radians. Parameters deg: Angle in degrees Return value Angle in radians doomToReal(doomangle) Converts a Doom angle (where 0\u00b0 is east) to a real world angle (where 0\u00b0 is north). Parameters doomangle: Doom angle in degrees Return value Doom angle in degrees doomToRealRad(doomangle) Converts a Doom angle (where 0\u00b0 is east) to a real world angle (where 0\u00b0 is north) in radians. Parameters doomangle: Doom angle in degrees Return value Doom angle in radians getAngle(p1, p2, p3) Returns the angle between three positions. Parameters p1: First position p2: Second position p3: Third position Return value Angle in degrees getAngleRad(p1, p2, p3) Returns the angle between three positions in radians. Parameters p1: First position p2: Second position p3: Third position Return value Angle in radians normalized(angle) Normalizes an angle in degrees so that it is bigger or equal to 0\u00b0 and smaller than 360\u00b0. Parameters angle: Angle in degrees Return value Normalized angle in degrees normalizedRad(angle) Normalizes an angle in radians so that it is bigger or equal to 0 and smaller than 2 Pi. Parameters angle: Angle in radians Return value Normalized angle in radians radToDeg(rad) Converts radians to degrees. Parameters rad: Angle in radians Return value Angle in degrees realToDoom(realangle) Converts a real world angle (where 0\u00b0 is north) to a Doom angle (where 0\u00b0 is east). Parameters realangle: Real world angle in degrees Return value Doom angle in degrees realToDoomRad(realangle) Converts a real world angle (where 0\u00b0 is north) to a Doom angle (where 0\u00b0 is east) in radians. Parameters realangle: Real world angle in radians Return value Doom angle in degrees","title":"Angle2D"},{"location":"Angle2D/#angle2d","text":"","title":"Angle2D"},{"location":"Angle2D/#static-methods","text":"","title":"Static methods"},{"location":"Angle2D/#degtoraddeg","text":"Converts degrees to radians.","title":"degToRad(deg)"},{"location":"Angle2D/#parameters","text":"deg: Angle in degrees","title":"Parameters"},{"location":"Angle2D/#return-value","text":"Angle in radians","title":"Return value"},{"location":"Angle2D/#doomtorealdoomangle","text":"Converts a Doom angle (where 0\u00b0 is east) to a real world angle (where 0\u00b0 is north).","title":"doomToReal(doomangle)"},{"location":"Angle2D/#parameters_1","text":"doomangle: Doom angle in degrees","title":"Parameters"},{"location":"Angle2D/#return-value_1","text":"Doom angle in degrees","title":"Return value"},{"location":"Angle2D/#doomtorealraddoomangle","text":"Converts a Doom angle (where 0\u00b0 is east) to a real world angle (where 0\u00b0 is north) in radians.","title":"doomToRealRad(doomangle)"},{"location":"Angle2D/#parameters_2","text":"doomangle: Doom angle in degrees","title":"Parameters"},{"location":"Angle2D/#return-value_2","text":"Doom angle in radians","title":"Return value"},{"location":"Angle2D/#getanglep1-p2-p3","text":"Returns the angle between three positions.","title":"getAngle(p1, p2, p3)"},{"location":"Angle2D/#parameters_3","text":"p1: First position p2: Second position p3: Third position","title":"Parameters"},{"location":"Angle2D/#return-value_3","text":"Angle in degrees","title":"Return value"},{"location":"Angle2D/#getangleradp1-p2-p3","text":"Returns the angle between three positions in radians.","title":"getAngleRad(p1, p2, p3)"},{"location":"Angle2D/#parameters_4","text":"p1: First position p2: Second position p3: Third position","title":"Parameters"},{"location":"Angle2D/#return-value_4","text":"Angle in radians","title":"Return value"},{"location":"Angle2D/#normalizedangle","text":"Normalizes an angle in degrees so that it is bigger or equal to 0\u00b0 and smaller than 360\u00b0.","title":"normalized(angle)"},{"location":"Angle2D/#parameters_5","text":"angle: Angle in degrees","title":"Parameters"},{"location":"Angle2D/#return-value_5","text":"Normalized angle in degrees","title":"Return value"},{"location":"Angle2D/#normalizedradangle","text":"Normalizes an angle in radians so that it is bigger or equal to 0 and smaller than 2 Pi.","title":"normalizedRad(angle)"},{"location":"Angle2D/#parameters_6","text":"angle: Angle in radians","title":"Parameters"},{"location":"Angle2D/#return-value_6","text":"Normalized angle in radians","title":"Return value"},{"location":"Angle2D/#radtodegrad","text":"Converts radians to degrees.","title":"radToDeg(rad)"},{"location":"Angle2D/#parameters_7","text":"rad: Angle in radians","title":"Parameters"},{"location":"Angle2D/#return-value_7","text":"Angle in degrees","title":"Return value"},{"location":"Angle2D/#realtodoomrealangle","text":"Converts a real world angle (where 0\u00b0 is north) to a Doom angle (where 0\u00b0 is east).","title":"realToDoom(realangle)"},{"location":"Angle2D/#parameters_8","text":"realangle: Real world angle in degrees","title":"Parameters"},{"location":"Angle2D/#return-value_8","text":"Doom angle in degrees","title":"Return value"},{"location":"Angle2D/#realtodoomradrealangle","text":"Converts a real world angle (where 0\u00b0 is north) to a Doom angle (where 0\u00b0 is east) in radians.","title":"realToDoomRad(realangle)"},{"location":"Angle2D/#parameters_9","text":"realangle: Real world angle in radians","title":"Parameters"},{"location":"Angle2D/#return-value_9","text":"Doom angle in degrees","title":"Return value"},{"location":"Data/","text":"Data Static methods flatExists(name) Checks if a flat with the given name exists. Parameters name: Flat name to check Return value true if the flat exists, false if it doesn't getFlatInfo(name) Returns an ImageInfo object for the given flat name. Parameters name: Flat name to get the info for Return value ImageInfo object containing information about the flat getFlatNames() Returns an Array of all flat names. Return value Array of all flat names getTextureInfo(name) Returns an ImageInfo object for the given texture name. Parameters name: Texture name to get the info for Return value ImageInfo object containing information about the texture getTextureNames() Returns an Array of all texture names. Return value Array of all texture names textureExists(name) Checks if a texture with the given name exists. Parameters name: Texture name to check Return value true if the texture exists, false if it doesn't","title":"Data"},{"location":"Data/#data","text":"","title":"Data"},{"location":"Data/#static-methods","text":"","title":"Static methods"},{"location":"Data/#flatexistsname","text":"Checks if a flat with the given name exists.","title":"flatExists(name)"},{"location":"Data/#parameters","text":"name: Flat name to check","title":"Parameters"},{"location":"Data/#return-value","text":"true if the flat exists, false if it doesn't","title":"Return value"},{"location":"Data/#getflatinfoname","text":"Returns an ImageInfo object for the given flat name.","title":"getFlatInfo(name)"},{"location":"Data/#parameters_1","text":"name: Flat name to get the info for","title":"Parameters"},{"location":"Data/#return-value_1","text":"ImageInfo object containing information about the flat","title":"Return value"},{"location":"Data/#getflatnames","text":"Returns an Array of all flat names.","title":"getFlatNames()"},{"location":"Data/#return-value_2","text":"Array of all flat names","title":"Return value"},{"location":"Data/#gettextureinfoname","text":"Returns an ImageInfo object for the given texture name.","title":"getTextureInfo(name)"},{"location":"Data/#parameters_2","text":"name: Texture name to get the info for","title":"Parameters"},{"location":"Data/#return-value_3","text":"ImageInfo object containing information about the texture","title":"Return value"},{"location":"Data/#gettexturenames","text":"Returns an Array of all texture names.","title":"getTextureNames()"},{"location":"Data/#return-value_4","text":"Array of all texture names","title":"Return value"},{"location":"Data/#textureexistsname","text":"Checks if a texture with the given name exists.","title":"textureExists(name)"},{"location":"Data/#parameters_3","text":"name: Texture name to check","title":"Parameters"},{"location":"Data/#return-value_5","text":"true if the texture exists, false if it doesn't","title":"Return value"},{"location":"GameConfiguration/","text":"GameConfiguration Properties engineName Engine name, like doom , boom , zdoom etc. Used for the namespace in UDMF maps. Read-only. hasLocalSidedefTextureOffsets If the game configuration supports local sidedef texture offsets (distinct offsets for upper, middle, and lower sidedef parts).","title":"GameConfiguration"},{"location":"GameConfiguration/#gameconfiguration","text":"","title":"GameConfiguration"},{"location":"GameConfiguration/#properties","text":"","title":"Properties"},{"location":"GameConfiguration/#enginename","text":"Engine name, like doom , boom , zdoom etc. Used for the namespace in UDMF maps. Read-only.","title":"engineName"},{"location":"GameConfiguration/#haslocalsidedeftextureoffsets","text":"If the game configuration supports local sidedef texture offsets (distinct offsets for upper, middle, and lower sidedef parts).","title":"hasLocalSidedefTextureOffsets"},{"location":"ImageInfo/","text":"ImageInfo Properties height Height of the image. isFlat If the image is a flat ( true ) or not ( false ). name Name of the image. scale Scale of the image as Vector2D . width Width of the image.","title":"ImageInfo"},{"location":"ImageInfo/#imageinfo","text":"","title":"ImageInfo"},{"location":"ImageInfo/#properties","text":"","title":"Properties"},{"location":"ImageInfo/#height","text":"Height of the image.","title":"height"},{"location":"ImageInfo/#isflat","text":"If the image is a flat ( true ) or not ( false ).","title":"isFlat"},{"location":"ImageInfo/#name","text":"Name of the image.","title":"name"},{"location":"ImageInfo/#scale","text":"Scale of the image as Vector2D .","title":"scale"},{"location":"ImageInfo/#width","text":"Width of the image.","title":"width"},{"location":"Line2D/","text":"Line2D Constructors Line2D(v1, v2) Creates a new Line2D from two points. let line1 = new Line2D(new Vector2D(32, 64), new Vector2D(96, 128)); let line2 = new Line2D([ 32, 64 ], [ 96, 128 ]); Parameters v1: First point v2: Second point Static methods areIntersecting(a1, a2, b1, b2, bounded=true) Checks if two lines defined by their start and end points intersect. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used. Parameters a1: First point of first line a2: Second point of first line b1: First point of second line b2: Second point of second line bounded: true (default) to use finite length of lines, false to use infinite length of lines Return value true if the lines intersect, false if they do not areIntersecting(line1, line2, bounded=true) Checks if two lines intersect. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used. Parameters line1: First Line2D line2: Second Line2D bounded: true to use finite length of lines, false to use infinite length of lines Return value true if the lines intersect, false if they do not getCoordinatesAt(v1, v2, u) Returns the coordinate on a line defined by its start and end points as Vector2D . Parameters v1: First point of the line v2: Second point of the line u: Offset coordinate relative to the first point of the line Return value Point on the line as Vector2D getDistanceToLine(v1, v2, p, bounded=true) Returns the shortest distance from point p to the line defined by its start and end points. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used. Parameters v1: First point of the line v2: Second point of the line p: Point to get the distance to bounded: true (default) to use finite length of lines, false to use infinite length of lines Return value The shortest distance to the line getDistanceToLineSq(v1, v2, p, bounded = true) Returns the shortest square distance from point p to the line defined by its start and end points. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used. Parameters v1: First point of the line v2: Second point of the line p: Point to get the distance to bounded: true (default) to use finite length of lines, false to use infinite length of lines Return value The shortest square distance to the line getIntersectionPoint(a1, a2, b1, b2, bounded = true) Returns the intersection point of two lines as Vector2D . If the lines do not intersect the x and y properties of the Vector2D are NaN . If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used. Parameters a1: First point of first line a2: Second point of first line b1: First point of second line b2: Second point of second line bounded: true (default) to use finite length of lines, false to use infinite length of lines Return value The intersection point as Vector2D getNearestOnLine(v1, v2, p) Returns the offset coordinate on the line nearest to the given point. 0.0 being on the first point, 1.0 being on the second point, and u = 0.5 being in the middle between the points. Parameters v1: First point of the line v2: Second point of the line p: Point to get the nearest offset coordinate from Return value The offset value relative to the first point of the line. getSideOfLine(v1, v2, p) Returns which the of the line defined by its start and end point a given point is on. Parameters v1: First point of the line v2: Second point of the line p: Point to check Return value < 0 if p is on the front (right) side, > 0 if p is on the back (left) side, == 0 if p in on the line Properties v1 Vector2D position of start of the line. v2 Vector2D position of end of the line. Methods getAngle() Return the angle of the Line2D in degrees. Return value Angle of the Line2D in degrees getAngleRad() Returns the angle of the Line2D in radians. Return value Angle of Line2D in radians getCoordinatesAt(u) Returns the coordinates on the line, where u is the position between the first and second point, u = 0.0 being on the first point, u = 1.0 being on the second point, and u = 0.5 being in the middle between the points. Parameters u: Position on the line, between 0.0 and 1.0 Return value Position on the line as Vector2D getIntersectionPoint(a1, a2, bounded = true) Returns the intersection point of of the given line defined by its start and end points with this line as Vector2D . If the lines do not intersect the x and y properties of the Vector2D are NaN . If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used. Parameters a1: First point of first line a2: Second point of first line bounded: true (default) to use finite length of lines, false to use infinite length of lines Return value The intersection point as Vector2D getIntersectionPoint(ray, bounded=true) Returns the intersection point of of the given line with this line as Vector2D . If the lines do not intersect the x and y properties of the Vector2D are NaN . If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used. Parameters ray: Other Line2D to get the intersection point from bounded: true (default) to use finite length of lines, false to use infinite length of lines Return value The intersection point as Vector2D getLength() Returns the length of the Line2D . Return value Length of the Line2D getPerpendicular() Returns the perpendicular of this line as Vector2D . Return value Perpendicular of this line as Vector2D getSideOfLine(p) Returns which the of the line defined by its start and end point a given point is on. Parameters p: Point to check Return value < 0 if p is on the front (right) side, > 0 if p is on the back (left) side, == 0 if p in on the line isIntersecting(a1, a2, bounded = true) Checks if the given line intersects this line. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used. Parameters a1: First point of the line to check against a2: Second point of the line to check against bounded: true (default) to use finite length of lines, false to use infinite length of lines Return value true if the lines intersect, false if they do not isIntersecting(ray, bounded=true) Checks if the given Line2D intersects this line. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used. Parameters ray: Line2D to check against bounded: true (default) to use finite length of lines, false to use infinite length of lines Return value true if lines intersect, false if they do not intersect","title":"Line2D"},{"location":"Line2D/#line2d","text":"","title":"Line2D"},{"location":"Line2D/#constructors","text":"","title":"Constructors"},{"location":"Line2D/#line2dv1-v2","text":"Creates a new Line2D from two points. let line1 = new Line2D(new Vector2D(32, 64), new Vector2D(96, 128)); let line2 = new Line2D([ 32, 64 ], [ 96, 128 ]);","title":"Line2D(v1, v2)"},{"location":"Line2D/#parameters","text":"v1: First point v2: Second point","title":"Parameters"},{"location":"Line2D/#static-methods","text":"","title":"Static methods"},{"location":"Line2D/#areintersectinga1-a2-b1-b2-boundedtrue","text":"Checks if two lines defined by their start and end points intersect. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used.","title":"areIntersecting(a1, a2, b1, b2, bounded=true)"},{"location":"Line2D/#parameters_1","text":"a1: First point of first line a2: Second point of first line b1: First point of second line b2: Second point of second line bounded: true (default) to use finite length of lines, false to use infinite length of lines","title":"Parameters"},{"location":"Line2D/#return-value","text":"true if the lines intersect, false if they do not","title":"Return value"},{"location":"Line2D/#areintersectingline1-line2-boundedtrue","text":"Checks if two lines intersect. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used.","title":"areIntersecting(line1, line2, bounded=true)"},{"location":"Line2D/#parameters_2","text":"line1: First Line2D line2: Second Line2D bounded: true to use finite length of lines, false to use infinite length of lines","title":"Parameters"},{"location":"Line2D/#return-value_1","text":"true if the lines intersect, false if they do not","title":"Return value"},{"location":"Line2D/#getcoordinatesatv1-v2-u","text":"Returns the coordinate on a line defined by its start and end points as Vector2D .","title":"getCoordinatesAt(v1, v2, u)"},{"location":"Line2D/#parameters_3","text":"v1: First point of the line v2: Second point of the line u: Offset coordinate relative to the first point of the line","title":"Parameters"},{"location":"Line2D/#return-value_2","text":"Point on the line as Vector2D","title":"Return value"},{"location":"Line2D/#getdistancetolinev1-v2-p-boundedtrue","text":"Returns the shortest distance from point p to the line defined by its start and end points. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used.","title":"getDistanceToLine(v1, v2, p, bounded=true)"},{"location":"Line2D/#parameters_4","text":"v1: First point of the line v2: Second point of the line p: Point to get the distance to bounded: true (default) to use finite length of lines, false to use infinite length of lines","title":"Parameters"},{"location":"Line2D/#return-value_3","text":"The shortest distance to the line","title":"Return value"},{"location":"Line2D/#getdistancetolinesqv1-v2-p-bounded-true","text":"Returns the shortest square distance from point p to the line defined by its start and end points. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used.","title":"getDistanceToLineSq(v1, v2, p, bounded = true)"},{"location":"Line2D/#parameters_5","text":"v1: First point of the line v2: Second point of the line p: Point to get the distance to bounded: true (default) to use finite length of lines, false to use infinite length of lines","title":"Parameters"},{"location":"Line2D/#return-value_4","text":"The shortest square distance to the line","title":"Return value"},{"location":"Line2D/#getintersectionpointa1-a2-b1-b2-bounded-true","text":"Returns the intersection point of two lines as Vector2D . If the lines do not intersect the x and y properties of the Vector2D are NaN . If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used.","title":"getIntersectionPoint(a1, a2, b1, b2, bounded = true)"},{"location":"Line2D/#parameters_6","text":"a1: First point of first line a2: Second point of first line b1: First point of second line b2: Second point of second line bounded: true (default) to use finite length of lines, false to use infinite length of lines","title":"Parameters"},{"location":"Line2D/#return-value_5","text":"The intersection point as Vector2D","title":"Return value"},{"location":"Line2D/#getnearestonlinev1-v2-p","text":"Returns the offset coordinate on the line nearest to the given point. 0.0 being on the first point, 1.0 being on the second point, and u = 0.5 being in the middle between the points.","title":"getNearestOnLine(v1, v2, p)"},{"location":"Line2D/#parameters_7","text":"v1: First point of the line v2: Second point of the line p: Point to get the nearest offset coordinate from","title":"Parameters"},{"location":"Line2D/#return-value_6","text":"The offset value relative to the first point of the line.","title":"Return value"},{"location":"Line2D/#getsideoflinev1-v2-p","text":"Returns which the of the line defined by its start and end point a given point is on.","title":"getSideOfLine(v1, v2, p)"},{"location":"Line2D/#parameters_8","text":"v1: First point of the line v2: Second point of the line p: Point to check","title":"Parameters"},{"location":"Line2D/#return-value_7","text":"< 0 if p is on the front (right) side, > 0 if p is on the back (left) side, == 0 if p in on the line","title":"Return value"},{"location":"Line2D/#properties","text":"","title":"Properties"},{"location":"Line2D/#v1","text":"Vector2D position of start of the line.","title":"v1"},{"location":"Line2D/#v2","text":"Vector2D position of end of the line.","title":"v2"},{"location":"Line2D/#methods","text":"","title":"Methods"},{"location":"Line2D/#getangle","text":"Return the angle of the Line2D in degrees.","title":"getAngle()"},{"location":"Line2D/#return-value_8","text":"Angle of the Line2D in degrees","title":"Return value"},{"location":"Line2D/#getanglerad","text":"Returns the angle of the Line2D in radians.","title":"getAngleRad()"},{"location":"Line2D/#return-value_9","text":"Angle of Line2D in radians","title":"Return value"},{"location":"Line2D/#getcoordinatesatu","text":"Returns the coordinates on the line, where u is the position between the first and second point, u = 0.0 being on the first point, u = 1.0 being on the second point, and u = 0.5 being in the middle between the points.","title":"getCoordinatesAt(u)"},{"location":"Line2D/#parameters_9","text":"u: Position on the line, between 0.0 and 1.0","title":"Parameters"},{"location":"Line2D/#return-value_10","text":"Position on the line as Vector2D","title":"Return value"},{"location":"Line2D/#getintersectionpointa1-a2-bounded-true","text":"Returns the intersection point of of the given line defined by its start and end points with this line as Vector2D . If the lines do not intersect the x and y properties of the Vector2D are NaN . If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used.","title":"getIntersectionPoint(a1, a2, bounded = true)"},{"location":"Line2D/#parameters_10","text":"a1: First point of first line a2: Second point of first line bounded: true (default) to use finite length of lines, false to use infinite length of lines","title":"Parameters"},{"location":"Line2D/#return-value_11","text":"The intersection point as Vector2D","title":"Return value"},{"location":"Line2D/#getintersectionpointray-boundedtrue","text":"Returns the intersection point of of the given line with this line as Vector2D . If the lines do not intersect the x and y properties of the Vector2D are NaN . If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used.","title":"getIntersectionPoint(ray, bounded=true)"},{"location":"Line2D/#parameters_11","text":"ray: Other Line2D to get the intersection point from bounded: true (default) to use finite length of lines, false to use infinite length of lines","title":"Parameters"},{"location":"Line2D/#return-value_12","text":"The intersection point as Vector2D","title":"Return value"},{"location":"Line2D/#getlength","text":"Returns the length of the Line2D .","title":"getLength()"},{"location":"Line2D/#return-value_13","text":"Length of the Line2D","title":"Return value"},{"location":"Line2D/#getperpendicular","text":"Returns the perpendicular of this line as Vector2D .","title":"getPerpendicular()"},{"location":"Line2D/#return-value_14","text":"Perpendicular of this line as Vector2D","title":"Return value"},{"location":"Line2D/#getsideoflinep","text":"Returns which the of the line defined by its start and end point a given point is on.","title":"getSideOfLine(p)"},{"location":"Line2D/#parameters_12","text":"p: Point to check","title":"Parameters"},{"location":"Line2D/#return-value_15","text":"< 0 if p is on the front (right) side, > 0 if p is on the back (left) side, == 0 if p in on the line","title":"Return value"},{"location":"Line2D/#isintersectinga1-a2-bounded-true","text":"Checks if the given line intersects this line. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used.","title":"isIntersecting(a1, a2, bounded = true)"},{"location":"Line2D/#parameters_13","text":"a1: First point of the line to check against a2: Second point of the line to check against bounded: true (default) to use finite length of lines, false to use infinite length of lines","title":"Parameters"},{"location":"Line2D/#return-value_16","text":"true if the lines intersect, false if they do not","title":"Return value"},{"location":"Line2D/#isintersectingray-boundedtrue","text":"Checks if the given Line2D intersects this line. If bounded is set to true (default) the finite length of the lines is used, otherwise the infinite length of the lines is used.","title":"isIntersecting(ray, bounded=true)"},{"location":"Line2D/#parameters_14","text":"ray: Line2D to check against bounded: true (default) to use finite length of lines, false to use infinite length of lines","title":"Parameters"},{"location":"Line2D/#return-value_17","text":"true if lines intersect, false if they do not intersect","title":"Return value"},{"location":"Linedef/","text":"Linedef Properties action Linedef action. angle The Linedef 's angle in degree. Read-only. angleRad The Linedef 's angle in radians. Read-only. args Array of arguments of the Linedef . Number of arguments depends on game config (usually 5). Hexen format and UDMF only. back The Linedef 's back Sidedef . Is null when there is no back. end The linedef's end Vertex . fields UDMF fields. It's an object with the fields as properties. s.fields.comment = 'This is a comment'; s.fields['comment'] = 'This is a comment'; // Also works s.fields.xscalefloor = 2.0; t.score = 100; It is also possible to define new fields: s.fields.user_myboolfield = true; There are some restrictions, though: it only works for fields that are not in the base UDMF standard, since those are handled directly in the respective class it does not work for flags. While they are technically also UDMF fields, they are handled in the flags field of the respective class (where applicable) JavaScript does not distinguish between integer and floating point numbers, it only has floating point numbers (of double precision). For fields where UDB knows that they are integers this it not a problem, since it'll automatically convert the floating point numbers to integers (dropping the fractional part). However, if you need to specify an integer value for an unknown or custom field you have to work around this limitation, using the UniValue class: s.fields.user_myintfield = new UniValue(0, 25); // Sets the 'user_myintfield' field to an integer value of 25 flags Linedef flags. It's an object with the flags as properties. In Doom format and Hexen format they are identified by numbers, in UDMF by their name. Doom and Hexen: ld.flags['64'] = true; // Set the block sound flag UDMF: ld.flags['blocksound'] = true; // Set the block sound flag ld.flags.blocksound = true; // Also works front The Linedef 's front Sidedef . Is null when there is no front (should not happen). index The linedef's index. Read-only. length The Linedef 's length. Read-only. lengthInv 1.0 / length. Read-only. lengthSq The Linedef 's squared length. Read-only. line The Line2D from the start to the end Vertex . marked If the Linedef is marked or not. It is used to mark map elements that were created or changed (for example after drawing new geometry). selected If the Linedef is selected or not. start The linedef's start Vertex . tag Linedef tag. UDMF only. Methods addTag(tag) Adds a tag to the Linedef . UDMF only. Supported game configurations only. Parameters tag: Tag to add Return value true when the tag was added, false when the tag already exists applySidedFlags() Automatically sets the blocking and two-sided flags based on the existing Sidedef s. clearFlags() Clears all flags. copyPropertiesTo(other) Copies the properties of this Linedef to another Linedef . Parameters other: The Linedef to copy the properties to delete() Deletes the Linedef . Note that this will result in unclosed Sector s unless it has the same Sector s on both sides. distanceTo(pos, bounded) Gets the shortest distance from pos to the line. Parameters pos: Point to check against bounded: true if only the finite length of the line should be used, false if the infinite length of the line should be used Return value Distance to the line distanceToSq(pos, bounded) Gets the shortest squared distance from pos to the line. Parameters pos: Point to check against bounded: true if only the finite length of the line should be used, false if the infinite length of the line should be used Return value Squared distance to the line flipSidedefs() Flips the Linedef 's Sidedefs . flipVertices() Flips the Linedef 's vertex attachments. getCenterPoint() Gets a Vector2D that's in the center of the Linedef . Return value Vector2D in the center of the Linedef getSidePoint(front) Gets a Vector2D for testing on one side. The Vector2D is on the front when true is passed, otherwise on the back. Parameters front: true for front, false for back Return value Vector2D that's either on the front of back of the Linedef getTags() Returns an Array of the Linedef 's tags. UDMF only. Supported game configurations only. Return value Array of tags nearestOnLine(pos) Get a Vector2D that's on the line, closest to pos . pos can either be a Vector2D , or an array of numbers. var v1 = ld.nearestOnLine(new Vector2D(32, 64)); var v2 = ld.nearestOnLine([ 32, 64 ]); Parameters pos: Point to check against Return value Vector2D that's on the linedef removeTag(tag) Removes a tag from the Linedef . UDMF only. Supported game configurations only. Parameters tag: Tag to remove Return value true when the tag was removed successfully, false when the tag did not exist safeDistanceTo(pos, bounded) Gets the shortest \"safe\" distance from pos to the line. If bounded is true that means that the not the whole line's length will be used, but lengthInv less at the start and end. Parameters pos: Point to check against bounded: true if only the finite length of the line should be used, false if the infinite length of the line should be used Return value Distance to the line safeDistanceToSq(pos, bounded) Gets the shortest \"safe\" squared distance from pos to the line. If bounded is true that means that the not the whole line's length will be used, but lengthInv less at the start and end. Parameters pos: Point to check against bounded: true if only the finite length of the line should be used, false if the infinite length of the line should be used Return value Squared distance to the line sideOfLine(pos) Tests which side of the Linedef pos is on. Returns < 0 for front (right) side, > for back (left) side, and 0 if pos is on the line. Parameters pos: Point to check against Return value < 0 for front (right) side, > for back (left) side, and 0 if pos is on the line split(v) Splits the Linedef at the given Vertex . The result will be two lines, from the start Vertex of the Linedef to v , and from v to the end Vertex of the Linedef . Parameters v: Vertex to split by Return value The newly created Linedef","title":"Linedef"},{"location":"Linedef/#linedef","text":"","title":"Linedef"},{"location":"Linedef/#properties","text":"","title":"Properties"},{"location":"Linedef/#action","text":"Linedef action.","title":"action"},{"location":"Linedef/#angle","text":"The Linedef 's angle in degree. Read-only.","title":"angle"},{"location":"Linedef/#anglerad","text":"The Linedef 's angle in radians. Read-only.","title":"angleRad"},{"location":"Linedef/#args","text":"Array of arguments of the Linedef . Number of arguments depends on game config (usually 5). Hexen format and UDMF only.","title":"args"},{"location":"Linedef/#back","text":"The Linedef 's back Sidedef . Is null when there is no back.","title":"back"},{"location":"Linedef/#end","text":"The linedef's end Vertex .","title":"end"},{"location":"Linedef/#fields","text":"UDMF fields. It's an object with the fields as properties. s.fields.comment = 'This is a comment'; s.fields['comment'] = 'This is a comment'; // Also works s.fields.xscalefloor = 2.0; t.score = 100; It is also possible to define new fields: s.fields.user_myboolfield = true; There are some restrictions, though: it only works for fields that are not in the base UDMF standard, since those are handled directly in the respective class it does not work for flags. While they are technically also UDMF fields, they are handled in the flags field of the respective class (where applicable) JavaScript does not distinguish between integer and floating point numbers, it only has floating point numbers (of double precision). For fields where UDB knows that they are integers this it not a problem, since it'll automatically convert the floating point numbers to integers (dropping the fractional part). However, if you need to specify an integer value for an unknown or custom field you have to work around this limitation, using the UniValue class: s.fields.user_myintfield = new UniValue(0, 25); // Sets the 'user_myintfield' field to an integer value of 25","title":"fields"},{"location":"Linedef/#flags","text":"Linedef flags. It's an object with the flags as properties. In Doom format and Hexen format they are identified by numbers, in UDMF by their name. Doom and Hexen: ld.flags['64'] = true; // Set the block sound flag UDMF: ld.flags['blocksound'] = true; // Set the block sound flag ld.flags.blocksound = true; // Also works","title":"flags"},{"location":"Linedef/#front","text":"The Linedef 's front Sidedef . Is null when there is no front (should not happen).","title":"front"},{"location":"Linedef/#index","text":"The linedef's index. Read-only.","title":"index"},{"location":"Linedef/#length","text":"The Linedef 's length. Read-only.","title":"length"},{"location":"Linedef/#lengthinv","text":"1.0 / length. Read-only.","title":"lengthInv"},{"location":"Linedef/#lengthsq","text":"The Linedef 's squared length. Read-only.","title":"lengthSq"},{"location":"Linedef/#line","text":"The Line2D from the start to the end Vertex .","title":"line"},{"location":"Linedef/#marked","text":"If the Linedef is marked or not. It is used to mark map elements that were created or changed (for example after drawing new geometry).","title":"marked"},{"location":"Linedef/#selected","text":"If the Linedef is selected or not.","title":"selected"},{"location":"Linedef/#start","text":"The linedef's start Vertex .","title":"start"},{"location":"Linedef/#tag","text":"Linedef tag. UDMF only.","title":"tag"},{"location":"Linedef/#methods","text":"","title":"Methods"},{"location":"Linedef/#addtagtag","text":"Adds a tag to the Linedef . UDMF only. Supported game configurations only.","title":"addTag(tag)"},{"location":"Linedef/#parameters","text":"tag: Tag to add","title":"Parameters"},{"location":"Linedef/#return-value","text":"true when the tag was added, false when the tag already exists","title":"Return value"},{"location":"Linedef/#applysidedflags","text":"Automatically sets the blocking and two-sided flags based on the existing Sidedef s.","title":"applySidedFlags()"},{"location":"Linedef/#clearflags","text":"Clears all flags.","title":"clearFlags()"},{"location":"Linedef/#copypropertiestoother","text":"Copies the properties of this Linedef to another Linedef .","title":"copyPropertiesTo(other)"},{"location":"Linedef/#parameters_1","text":"other: The Linedef to copy the properties to","title":"Parameters"},{"location":"Linedef/#delete","text":"Deletes the Linedef . Note that this will result in unclosed Sector s unless it has the same Sector s on both sides.","title":"delete()"},{"location":"Linedef/#distancetopos-bounded","text":"Gets the shortest distance from pos to the line.","title":"distanceTo(pos, bounded)"},{"location":"Linedef/#parameters_2","text":"pos: Point to check against bounded: true if only the finite length of the line should be used, false if the infinite length of the line should be used","title":"Parameters"},{"location":"Linedef/#return-value_1","text":"Distance to the line","title":"Return value"},{"location":"Linedef/#distancetosqpos-bounded","text":"Gets the shortest squared distance from pos to the line.","title":"distanceToSq(pos, bounded)"},{"location":"Linedef/#parameters_3","text":"pos: Point to check against bounded: true if only the finite length of the line should be used, false if the infinite length of the line should be used","title":"Parameters"},{"location":"Linedef/#return-value_2","text":"Squared distance to the line","title":"Return value"},{"location":"Linedef/#flipsidedefs","text":"Flips the Linedef 's Sidedefs .","title":"flipSidedefs()"},{"location":"Linedef/#flipvertices","text":"Flips the Linedef 's vertex attachments.","title":"flipVertices()"},{"location":"Linedef/#getcenterpoint","text":"Gets a Vector2D that's in the center of the Linedef .","title":"getCenterPoint()"},{"location":"Linedef/#return-value_3","text":"Vector2D in the center of the Linedef","title":"Return value"},{"location":"Linedef/#getsidepointfront","text":"Gets a Vector2D for testing on one side. The Vector2D is on the front when true is passed, otherwise on the back.","title":"getSidePoint(front)"},{"location":"Linedef/#parameters_4","text":"front: true for front, false for back","title":"Parameters"},{"location":"Linedef/#return-value_4","text":"Vector2D that's either on the front of back of the Linedef","title":"Return value"},{"location":"Linedef/#gettags","text":"Returns an Array of the Linedef 's tags. UDMF only. Supported game configurations only.","title":"getTags()"},{"location":"Linedef/#return-value_5","text":"Array of tags","title":"Return value"},{"location":"Linedef/#nearestonlinepos","text":"Get a Vector2D that's on the line, closest to pos . pos can either be a Vector2D , or an array of numbers. var v1 = ld.nearestOnLine(new Vector2D(32, 64)); var v2 = ld.nearestOnLine([ 32, 64 ]);","title":"nearestOnLine(pos)"},{"location":"Linedef/#parameters_5","text":"pos: Point to check against","title":"Parameters"},{"location":"Linedef/#return-value_6","text":"Vector2D that's on the linedef","title":"Return value"},{"location":"Linedef/#removetagtag","text":"Removes a tag from the Linedef . UDMF only. Supported game configurations only.","title":"removeTag(tag)"},{"location":"Linedef/#parameters_6","text":"tag: Tag to remove","title":"Parameters"},{"location":"Linedef/#return-value_7","text":"true when the tag was removed successfully, false when the tag did not exist","title":"Return value"},{"location":"Linedef/#safedistancetopos-bounded","text":"Gets the shortest \"safe\" distance from pos to the line. If bounded is true that means that the not the whole line's length will be used, but lengthInv less at the start and end.","title":"safeDistanceTo(pos, bounded)"},{"location":"Linedef/#parameters_7","text":"pos: Point to check against bounded: true if only the finite length of the line should be used, false if the infinite length of the line should be used","title":"Parameters"},{"location":"Linedef/#return-value_8","text":"Distance to the line","title":"Return value"},{"location":"Linedef/#safedistancetosqpos-bounded","text":"Gets the shortest \"safe\" squared distance from pos to the line. If bounded is true that means that the not the whole line's length will be used, but lengthInv less at the start and end.","title":"safeDistanceToSq(pos, bounded)"},{"location":"Linedef/#parameters_8","text":"pos: Point to check against bounded: true if only the finite length of the line should be used, false if the infinite length of the line should be used","title":"Parameters"},{"location":"Linedef/#return-value_9","text":"Squared distance to the line","title":"Return value"},{"location":"Linedef/#sideoflinepos","text":"Tests which side of the Linedef pos is on. Returns < 0 for front (right) side, > for back (left) side, and 0 if pos is on the line.","title":"sideOfLine(pos)"},{"location":"Linedef/#parameters_9","text":"pos: Point to check against","title":"Parameters"},{"location":"Linedef/#return-value_10","text":"< 0 for front (right) side, > for back (left) side, and 0 if pos is on the line","title":"Return value"},{"location":"Linedef/#splitv","text":"Splits the Linedef at the given Vertex . The result will be two lines, from the start Vertex of the Linedef to v , and from v to the end Vertex of the Linedef .","title":"split(v)"},{"location":"Linedef/#parameters_10","text":"v: Vertex to split by","title":"Parameters"},{"location":"Linedef/#return-value_11","text":"The newly created Linedef","title":"Return value"},{"location":"Map/","text":"Map Properties isDoom true if the map is in Doom format, false if it isn't. Read-only. isHexen true if the map is in Hexen format, false if it isn't. Read-only. isUDMF true if the map is in UDMF, false if it isn't. Read-only. mousePosition The map coordinates of the mouse position as a Vector2D . Read-only. Methods clearAllMarks(mark=false) Sets the marked property of all map elements. Can be passed true to mark all map elements. Parameters mark: false to set the marked property to false (default), true to set the marked property to true clearAllSelected() Clears all selected map elements. clearMarkeLinedefs(mark=false) Sets the marked property of all Linedef s. Can be passed true to mark all Linedef s. Parameters mark: false to set the marked property to false (default), true to set the marked property to true clearMarkeSectors(mark = false) Sets the marked property of all Sector s. Can be passed true to mark all Sector s. Parameters mark: false to set the marked property to false (default), true to set the marked property to true clearMarkeSidedefs(mark = false) Sets the marked property of all Sidedef s. Can be passed true to mark all Sidedef s. Parameters mark: false to set the marked property to false (default), true to set the marked property to true clearMarkedThings(mark=false) Sets the marked property of all Thing s. Can be passed true to mark all Thing s. Parameters mark: false to set the marked property to false (default), true to set the marked property to true clearMarkedVertices(mark=false) Sets the marked property of all vertices. Can be passed true to mark all vertices. Parameters mark: false to set the marked property to false (default), true to set the marked property to true clearSelectedSectors() Clears all selected Sector s. clearSelectedThings() Clears all selected Thing s. clearSelectedVertices() Clears all selected vertices. createThing(pos, type=0) Creates a new Thing at the given position. The position can be a Vector2D or an Array of two numbers. A thing type can be supplied optionally. var t1 = Map.createThing(new Vector2D(32, 64)); var t2 = Map.createThing([ 32, 64 ]); var t3 = Map.createThing(new Vector2D(32, 64), 3001); // Create an Imp var t4 = Map.createThing([ 32, 64 ], 3001); // Create an Imp Parameters pos: Position where the Thing should be created at type: Thing type (optional) Return value The new Thing createVertex(pos) Creates a new Vertex at the given position. The position can be a Vector2D or an Array of two numbers. var v1 = Map.createVertex(new Vector2D(32, 64)); var v2 = Map.createVertex([ 32, 64 ]); Parameters pos: Position where the Vertex should be created at Return value The created Vertex drawLines(data) Draws lines. Data has to be an Array of Array of numbers, Vector2D s, Vector3D s, or objects with x and y properties. Note that the first and last element have to be at the same positions to make a complete drawing. Map.drawLines([ new Vector2D(64, 0), new Vector2D(128, 0), new Vector2D(128, 64), new Vector2D(64, 64), new Vector2D(64, 0) ]); Map.drawLines([ [ 0, 0 ], [ 64, 0 ], [ 64, 64 ], [ 0, 64 ], [ 0, 0 ] ]); Parameters data: Array of positions Return value true if drawing was successful, false if it wasn't getLinedefs() Returns an Array of all Linedef s in the map. Return value Array of Linedef s getMarkedLinedefs(mark = true) Gets all marked (default) or unmarked Linedef s. Parameters mark: true to get all marked Linedef s (default), false to get all unmarked Linedef s Return value missing getMarkedSectors(mark = true) Gets all marked (default) or unmarked Sector s. Parameters mark: true to get all marked Sector s (default), false to get all unmarked Sector s Return value missing getMarkedSidedefs(mark = true) Gets all marked (default) or unmarked Sidedef s. Parameters mark: true to get all marked Sidedef s (default), false to get all unmarked Sidedef s Return value missing getMarkedThings(mark = true) Gets all marked (default) or unmarked Thing s. Parameters mark: true to get all marked Thing s (default), false to get all unmarked Thing s Return value missing getMarkedVertices(mark=true) Gets all marked (default) or unmarked vertices. Parameters mark: true to get all marked vertices (default), false to get all unmarked vertices Return value missing getMultipleNewTags(count) Gets multiple new tags. Parameters count: Number of tags to get Return value Array of the new tags getNewTag(usedtags = null) Gets a new tag. Parameters usedtags: Array of tags to skip Return value The new tag getSectors() Returns an Array of all Sector s in the map. Return value Array of Sector s getSelectedLinedefs(selected = true) Gets all selected (default) or unselected Linedef s. Parameters selected: true to get all selected Linedef s, false to get all unselected ones Return value missing getSelectedSectors(selected = true) Gets all selected (default) or unselected Sector s. Parameters selected: true to get all selected Sector s, false to get all unselected ones Return value missing getSelectedThings(selected = true) Gets all selected (default) or unselected Thing s. Parameters selected: true to get all selected Thing s, false to get all unselected ones Return value missing getSelectedVertices(selected=true) Gets all selected (default) or unselected vertices. Parameters selected: true to get all selected vertices, false to get all unselected ones Return value missing getSidedefs() Returns an Array of all Sidedef s in the map. Return value Array of Sidedef s getSidedefsFromSelectedLinedefs(selected = true) Gets all Sidedef s from the selected Linedef s. Parameters selected: true to get all Sidedef s of all selected Linedef s, false to get all Sidedef s of all unselected Linedef s Return value missing getThings() Returns an Array of all Thing s in the map. Return value Array of Thing s getVertices() Returns an Array of all Vertex in the map. Return value Array of Vertex invertAllMarks() Inverts all marks of all map elements. invertMarkedLinedefs() Inverts the marked property of all Linedef s. invertMarkedSectors() Inverts the marked property of all Sector s. invertMarkedSidedefs() Inverts the marked property of all Sidedef s. invertMarkedThings() Inverts the marked property of all Thing s. invertMarkedVertices() Inverts the marked property of all vertices. markSelectedLinedefs(mark = true) Marks (default) or unmarks all selected Linedef s. Parameters mark: true to mark all selected Linedef s (default), false to unmark markSelectedSectors(mark = true) Marks (default) or unmarks all selected Sector s. Parameters mark: true to mark all selected Sector s (default), false to unmark markSelectedThings(mark = true) Marks (default) or unmarks all selected Thing s. Parameters mark: true to mark all selected Thing s (default), false to unmark markSelectedVertices(mark=true) Marks (default) or unmarks all selected vertices. Parameters mark: true to mark all selected vertices (default), false to unmark nearestLinedef(pos, maxrange = double.NaN) Gets the Linedef that's nearest to the specified position. Parameters pos: Position to check against maxrange: Maximum range (optional) Return value Nearest Linedef nearestSidedef(pos) Gets the Sidedef that's nearest to the specified position. Parameters pos: Position to check against maxrange: Maximum range (optional) Return value Nearest Sidedef nearestThing(pos, maxrange = double.NaN) Gets the Thing that's nearest to the specified position. Parameters pos: Position to check against maxrange: Maximum range (optional) Return value Nearest Linedef nearestVertex(pos, maxrange = double.NaN) Gets the Vertex that's nearest to the specified position. Parameters pos: Position to check against maxrange: Maximum range (optional) Return value Nearest Vertex snapAllToAccuracy(usepreciseposition = true) Snaps all vertices and things to the map format accuracy. Call this to ensure the vertices and things are at valid coordinates. Parameters usepreciseposition: true if decimal places defined by the map format should be used, false if no decimal places should be used snappedToGrid(pos) Returns the given point snapped to the current grid. Parameters pos: Point that should be snapped to the grid Return value Snapped position as Vector2D stitchGeometry(mergemode = MergeGeometryMode.CLASSIC) Stitches marked geometry with non-marked geometry. Parameters mergemode: Mode to merge by Return value true if successful, false if failed","title":"Map"},{"location":"Map/#map","text":"","title":"Map"},{"location":"Map/#properties","text":"","title":"Properties"},{"location":"Map/#isdoom","text":"true if the map is in Doom format, false if it isn't. Read-only.","title":"isDoom"},{"location":"Map/#ishexen","text":"true if the map is in Hexen format, false if it isn't. Read-only.","title":"isHexen"},{"location":"Map/#isudmf","text":"true if the map is in UDMF, false if it isn't. Read-only.","title":"isUDMF"},{"location":"Map/#mouseposition","text":"The map coordinates of the mouse position as a Vector2D . Read-only.","title":"mousePosition"},{"location":"Map/#methods","text":"","title":"Methods"},{"location":"Map/#clearallmarksmarkfalse","text":"Sets the marked property of all map elements. Can be passed true to mark all map elements.","title":"clearAllMarks(mark=false)"},{"location":"Map/#parameters","text":"mark: false to set the marked property to false (default), true to set the marked property to true","title":"Parameters"},{"location":"Map/#clearallselected","text":"Clears all selected map elements.","title":"clearAllSelected()"},{"location":"Map/#clearmarkelinedefsmarkfalse","text":"Sets the marked property of all Linedef s. Can be passed true to mark all Linedef s.","title":"clearMarkeLinedefs(mark=false)"},{"location":"Map/#parameters_1","text":"mark: false to set the marked property to false (default), true to set the marked property to true","title":"Parameters"},{"location":"Map/#clearmarkesectorsmark-false","text":"Sets the marked property of all Sector s. Can be passed true to mark all Sector s.","title":"clearMarkeSectors(mark = false)"},{"location":"Map/#parameters_2","text":"mark: false to set the marked property to false (default), true to set the marked property to true","title":"Parameters"},{"location":"Map/#clearmarkesidedefsmark-false","text":"Sets the marked property of all Sidedef s. Can be passed true to mark all Sidedef s.","title":"clearMarkeSidedefs(mark = false)"},{"location":"Map/#parameters_3","text":"mark: false to set the marked property to false (default), true to set the marked property to true","title":"Parameters"},{"location":"Map/#clearmarkedthingsmarkfalse","text":"Sets the marked property of all Thing s. Can be passed true to mark all Thing s.","title":"clearMarkedThings(mark=false)"},{"location":"Map/#parameters_4","text":"mark: false to set the marked property to false (default), true to set the marked property to true","title":"Parameters"},{"location":"Map/#clearmarkedverticesmarkfalse","text":"Sets the marked property of all vertices. Can be passed true to mark all vertices.","title":"clearMarkedVertices(mark=false)"},{"location":"Map/#parameters_5","text":"mark: false to set the marked property to false (default), true to set the marked property to true","title":"Parameters"},{"location":"Map/#clearselectedsectors","text":"Clears all selected Sector s.","title":"clearSelectedSectors()"},{"location":"Map/#clearselectedthings","text":"Clears all selected Thing s.","title":"clearSelectedThings()"},{"location":"Map/#clearselectedvertices","text":"Clears all selected vertices.","title":"clearSelectedVertices()"},{"location":"Map/#createthingpos-type0","text":"Creates a new Thing at the given position. The position can be a Vector2D or an Array of two numbers. A thing type can be supplied optionally. var t1 = Map.createThing(new Vector2D(32, 64)); var t2 = Map.createThing([ 32, 64 ]); var t3 = Map.createThing(new Vector2D(32, 64), 3001); // Create an Imp var t4 = Map.createThing([ 32, 64 ], 3001); // Create an Imp","title":"createThing(pos, type=0)"},{"location":"Map/#parameters_6","text":"pos: Position where the Thing should be created at type: Thing type (optional)","title":"Parameters"},{"location":"Map/#return-value","text":"The new Thing","title":"Return value"},{"location":"Map/#createvertexpos","text":"Creates a new Vertex at the given position. The position can be a Vector2D or an Array of two numbers. var v1 = Map.createVertex(new Vector2D(32, 64)); var v2 = Map.createVertex([ 32, 64 ]);","title":"createVertex(pos)"},{"location":"Map/#parameters_7","text":"pos: Position where the Vertex should be created at","title":"Parameters"},{"location":"Map/#return-value_1","text":"The created Vertex","title":"Return value"},{"location":"Map/#drawlinesdata","text":"Draws lines. Data has to be an Array of Array of numbers, Vector2D s, Vector3D s, or objects with x and y properties. Note that the first and last element have to be at the same positions to make a complete drawing. Map.drawLines([ new Vector2D(64, 0), new Vector2D(128, 0), new Vector2D(128, 64), new Vector2D(64, 64), new Vector2D(64, 0) ]); Map.drawLines([ [ 0, 0 ], [ 64, 0 ], [ 64, 64 ], [ 0, 64 ], [ 0, 0 ] ]);","title":"drawLines(data)"},{"location":"Map/#parameters_8","text":"data: Array of positions","title":"Parameters"},{"location":"Map/#return-value_2","text":"true if drawing was successful, false if it wasn't","title":"Return value"},{"location":"Map/#getlinedefs","text":"Returns an Array of all Linedef s in the map.","title":"getLinedefs()"},{"location":"Map/#return-value_3","text":"Array of Linedef s","title":"Return value"},{"location":"Map/#getmarkedlinedefsmark-true","text":"Gets all marked (default) or unmarked Linedef s.","title":"getMarkedLinedefs(mark = true)"},{"location":"Map/#parameters_9","text":"mark: true to get all marked Linedef s (default), false to get all unmarked Linedef s","title":"Parameters"},{"location":"Map/#return-value_4","text":"missing","title":"Return value"},{"location":"Map/#getmarkedsectorsmark-true","text":"Gets all marked (default) or unmarked Sector s.","title":"getMarkedSectors(mark = true)"},{"location":"Map/#parameters_10","text":"mark: true to get all marked Sector s (default), false to get all unmarked Sector s","title":"Parameters"},{"location":"Map/#return-value_5","text":"missing","title":"Return value"},{"location":"Map/#getmarkedsidedefsmark-true","text":"Gets all marked (default) or unmarked Sidedef s.","title":"getMarkedSidedefs(mark = true)"},{"location":"Map/#parameters_11","text":"mark: true to get all marked Sidedef s (default), false to get all unmarked Sidedef s","title":"Parameters"},{"location":"Map/#return-value_6","text":"missing","title":"Return value"},{"location":"Map/#getmarkedthingsmark-true","text":"Gets all marked (default) or unmarked Thing s.","title":"getMarkedThings(mark = true)"},{"location":"Map/#parameters_12","text":"mark: true to get all marked Thing s (default), false to get all unmarked Thing s","title":"Parameters"},{"location":"Map/#return-value_7","text":"missing","title":"Return value"},{"location":"Map/#getmarkedverticesmarktrue","text":"Gets all marked (default) or unmarked vertices.","title":"getMarkedVertices(mark=true)"},{"location":"Map/#parameters_13","text":"mark: true to get all marked vertices (default), false to get all unmarked vertices","title":"Parameters"},{"location":"Map/#return-value_8","text":"missing","title":"Return value"},{"location":"Map/#getmultiplenewtagscount","text":"Gets multiple new tags.","title":"getMultipleNewTags(count)"},{"location":"Map/#parameters_14","text":"count: Number of tags to get","title":"Parameters"},{"location":"Map/#return-value_9","text":"Array of the new tags","title":"Return value"},{"location":"Map/#getnewtagusedtags-null","text":"Gets a new tag.","title":"getNewTag(usedtags = null)"},{"location":"Map/#parameters_15","text":"usedtags: Array of tags to skip","title":"Parameters"},{"location":"Map/#return-value_10","text":"The new tag","title":"Return value"},{"location":"Map/#getsectors","text":"Returns an Array of all Sector s in the map.","title":"getSectors()"},{"location":"Map/#return-value_11","text":"Array of Sector s","title":"Return value"},{"location":"Map/#getselectedlinedefsselected-true","text":"Gets all selected (default) or unselected Linedef s.","title":"getSelectedLinedefs(selected = true)"},{"location":"Map/#parameters_16","text":"selected: true to get all selected Linedef s, false to get all unselected ones","title":"Parameters"},{"location":"Map/#return-value_12","text":"missing","title":"Return value"},{"location":"Map/#getselectedsectorsselected-true","text":"Gets all selected (default) or unselected Sector s.","title":"getSelectedSectors(selected = true)"},{"location":"Map/#parameters_17","text":"selected: true to get all selected Sector s, false to get all unselected ones","title":"Parameters"},{"location":"Map/#return-value_13","text":"missing","title":"Return value"},{"location":"Map/#getselectedthingsselected-true","text":"Gets all selected (default) or unselected Thing s.","title":"getSelectedThings(selected = true)"},{"location":"Map/#parameters_18","text":"selected: true to get all selected Thing s, false to get all unselected ones","title":"Parameters"},{"location":"Map/#return-value_14","text":"missing","title":"Return value"},{"location":"Map/#getselectedverticesselectedtrue","text":"Gets all selected (default) or unselected vertices.","title":"getSelectedVertices(selected=true)"},{"location":"Map/#parameters_19","text":"selected: true to get all selected vertices, false to get all unselected ones","title":"Parameters"},{"location":"Map/#return-value_15","text":"missing","title":"Return value"},{"location":"Map/#getsidedefs","text":"Returns an Array of all Sidedef s in the map.","title":"getSidedefs()"},{"location":"Map/#return-value_16","text":"Array of Sidedef s","title":"Return value"},{"location":"Map/#getsidedefsfromselectedlinedefsselected-true","text":"Gets all Sidedef s from the selected Linedef s.","title":"getSidedefsFromSelectedLinedefs(selected = true)"},{"location":"Map/#parameters_20","text":"selected: true to get all Sidedef s of all selected Linedef s, false to get all Sidedef s of all unselected Linedef s","title":"Parameters"},{"location":"Map/#return-value_17","text":"missing","title":"Return value"},{"location":"Map/#getthings","text":"Returns an Array of all Thing s in the map.","title":"getThings()"},{"location":"Map/#return-value_18","text":"Array of Thing s","title":"Return value"},{"location":"Map/#getvertices","text":"Returns an Array of all Vertex in the map.","title":"getVertices()"},{"location":"Map/#return-value_19","text":"Array of Vertex","title":"Return value"},{"location":"Map/#invertallmarks","text":"Inverts all marks of all map elements.","title":"invertAllMarks()"},{"location":"Map/#invertmarkedlinedefs","text":"Inverts the marked property of all Linedef s.","title":"invertMarkedLinedefs()"},{"location":"Map/#invertmarkedsectors","text":"Inverts the marked property of all Sector s.","title":"invertMarkedSectors()"},{"location":"Map/#invertmarkedsidedefs","text":"Inverts the marked property of all Sidedef s.","title":"invertMarkedSidedefs()"},{"location":"Map/#invertmarkedthings","text":"Inverts the marked property of all Thing s.","title":"invertMarkedThings()"},{"location":"Map/#invertmarkedvertices","text":"Inverts the marked property of all vertices.","title":"invertMarkedVertices()"},{"location":"Map/#markselectedlinedefsmark-true","text":"Marks (default) or unmarks all selected Linedef s.","title":"markSelectedLinedefs(mark = true)"},{"location":"Map/#parameters_21","text":"mark: true to mark all selected Linedef s (default), false to unmark","title":"Parameters"},{"location":"Map/#markselectedsectorsmark-true","text":"Marks (default) or unmarks all selected Sector s.","title":"markSelectedSectors(mark = true)"},{"location":"Map/#parameters_22","text":"mark: true to mark all selected Sector s (default), false to unmark","title":"Parameters"},{"location":"Map/#markselectedthingsmark-true","text":"Marks (default) or unmarks all selected Thing s.","title":"markSelectedThings(mark = true)"},{"location":"Map/#parameters_23","text":"mark: true to mark all selected Thing s (default), false to unmark","title":"Parameters"},{"location":"Map/#markselectedverticesmarktrue","text":"Marks (default) or unmarks all selected vertices.","title":"markSelectedVertices(mark=true)"},{"location":"Map/#parameters_24","text":"mark: true to mark all selected vertices (default), false to unmark","title":"Parameters"},{"location":"Map/#nearestlinedefpos-maxrange-doublenan","text":"Gets the Linedef that's nearest to the specified position.","title":"nearestLinedef(pos, maxrange = double.NaN)"},{"location":"Map/#parameters_25","text":"pos: Position to check against maxrange: Maximum range (optional)","title":"Parameters"},{"location":"Map/#return-value_20","text":"Nearest Linedef","title":"Return value"},{"location":"Map/#nearestsidedefpos","text":"Gets the Sidedef that's nearest to the specified position.","title":"nearestSidedef(pos)"},{"location":"Map/#parameters_26","text":"pos: Position to check against maxrange: Maximum range (optional)","title":"Parameters"},{"location":"Map/#return-value_21","text":"Nearest Sidedef","title":"Return value"},{"location":"Map/#nearestthingpos-maxrange-doublenan","text":"Gets the Thing that's nearest to the specified position.","title":"nearestThing(pos, maxrange = double.NaN)"},{"location":"Map/#parameters_27","text":"pos: Position to check against maxrange: Maximum range (optional)","title":"Parameters"},{"location":"Map/#return-value_22","text":"Nearest Linedef","title":"Return value"},{"location":"Map/#nearestvertexpos-maxrange-doublenan","text":"Gets the Vertex that's nearest to the specified position.","title":"nearestVertex(pos, maxrange = double.NaN)"},{"location":"Map/#parameters_28","text":"pos: Position to check against maxrange: Maximum range (optional)","title":"Parameters"},{"location":"Map/#return-value_23","text":"Nearest Vertex","title":"Return value"},{"location":"Map/#snapalltoaccuracyusepreciseposition-true","text":"Snaps all vertices and things to the map format accuracy. Call this to ensure the vertices and things are at valid coordinates.","title":"snapAllToAccuracy(usepreciseposition = true)"},{"location":"Map/#parameters_29","text":"usepreciseposition: true if decimal places defined by the map format should be used, false if no decimal places should be used","title":"Parameters"},{"location":"Map/#snappedtogridpos","text":"Returns the given point snapped to the current grid.","title":"snappedToGrid(pos)"},{"location":"Map/#parameters_30","text":"pos: Point that should be snapped to the grid","title":"Parameters"},{"location":"Map/#return-value_24","text":"Snapped position as Vector2D","title":"Return value"},{"location":"Map/#stitchgeometrymergemode-mergegeometrymodeclassic","text":"Stitches marked geometry with non-marked geometry.","title":"stitchGeometry(mergemode = MergeGeometryMode.CLASSIC)"},{"location":"Map/#parameters_31","text":"mergemode: Mode to merge by","title":"Parameters"},{"location":"Map/#return-value_25","text":"true if successful, false if failed","title":"Return value"},{"location":"Pen/","text":"Pen The Pen class is an built-in library. It can be used to to create geometry Turtle graphics style. The class is inspired of the Pen class in Doom Builder X. Example: // Draw a regular pentagon let p = new Pen([0, 0]); for(let i=0; i < 5; i++) { p.drawVertex(); p.moveForward(128); p.turnRight(72); } p.finishDrawing(); Constructors Pen(pos) Creates an instance of the Pen class. The position can be a Vector2D or an Array of two numbers. Parameters pos: start position of the pen (optional) Return value An instance of the Pen class Methods moveForward(distance) Moves the pen by a distance at the current angle. Parameters distance: number of units to move moveTo(pos) Moves the pen to the given position. The position can be a Vector2D or an Array of two numbers. Parameters pos: position to move the pen to setAngle(degrees) Sets the angle to the given degrees. Parameters degrees: degrees to set the angle to setAngleRadians(radians) Sets the angle to the given radians. Parameters radians: radians to set the angle to turnLeft(degrees) Turns the pen left by the given degrees. Parameters degrees: degrees to turn left by. If omitted it will turn by 90\u00b0 turnLeftRadians(radians) Turns the pen left by the given radians. Parameters radians: radians to turn left by. If omitted it will turn by Pi/2 turnRight(degrees) Turns the pen right by the given degrees. Parameters degrees: degrees to turn right by. If omitted it will turn by 90\u00b0 turnRightRadians(radians) Turns the pen right by the given radians. Parameters radians: radians to turn right by. If omitted it will turn by Pi/2 drawVertex() Draws a Vertex at the current position. finishDrawing() Finishes the drawing, actually creating the geometry. Also resets the vertices of this instance of Pen .","title":"Pen"},{"location":"Pen/#pen","text":"The Pen class is an built-in library. It can be used to to create geometry Turtle graphics style. The class is inspired of the Pen class in Doom Builder X. Example: // Draw a regular pentagon let p = new Pen([0, 0]); for(let i=0; i < 5; i++) { p.drawVertex(); p.moveForward(128); p.turnRight(72); } p.finishDrawing();","title":"Pen"},{"location":"Pen/#constructors","text":"","title":"Constructors"},{"location":"Pen/#penpos","text":"Creates an instance of the Pen class. The position can be a Vector2D or an Array of two numbers.","title":"Pen(pos)"},{"location":"Pen/#parameters","text":"pos: start position of the pen (optional)","title":"Parameters"},{"location":"Pen/#return-value","text":"An instance of the Pen class","title":"Return value"},{"location":"Pen/#methods","text":"","title":"Methods"},{"location":"Pen/#moveforwarddistance","text":"Moves the pen by a distance at the current angle.","title":"moveForward(distance)"},{"location":"Pen/#parameters_1","text":"distance: number of units to move","title":"Parameters"},{"location":"Pen/#movetopos","text":"Moves the pen to the given position. The position can be a Vector2D or an Array of two numbers.","title":"moveTo(pos)"},{"location":"Pen/#parameters_2","text":"pos: position to move the pen to","title":"Parameters"},{"location":"Pen/#setangledegrees","text":"Sets the angle to the given degrees.","title":"setAngle(degrees)"},{"location":"Pen/#parameters_3","text":"degrees: degrees to set the angle to","title":"Parameters"},{"location":"Pen/#setangleradiansradians","text":"Sets the angle to the given radians.","title":"setAngleRadians(radians)"},{"location":"Pen/#parameters_4","text":"radians: radians to set the angle to","title":"Parameters"},{"location":"Pen/#turnleftdegrees","text":"Turns the pen left by the given degrees.","title":"turnLeft(degrees)"},{"location":"Pen/#parameters_5","text":"degrees: degrees to turn left by. If omitted it will turn by 90\u00b0","title":"Parameters"},{"location":"Pen/#turnleftradiansradians","text":"Turns the pen left by the given radians.","title":"turnLeftRadians(radians)"},{"location":"Pen/#parameters_6","text":"radians: radians to turn left by. If omitted it will turn by Pi/2","title":"Parameters"},{"location":"Pen/#turnrightdegrees","text":"Turns the pen right by the given degrees.","title":"turnRight(degrees)"},{"location":"Pen/#parameters_7","text":"degrees: degrees to turn right by. If omitted it will turn by 90\u00b0","title":"Parameters"},{"location":"Pen/#turnrightradiansradians","text":"Turns the pen right by the given radians.","title":"turnRightRadians(radians)"},{"location":"Pen/#parameters_8","text":"radians: radians to turn right by. If omitted it will turn by Pi/2","title":"Parameters"},{"location":"Pen/#drawvertex","text":"Draws a Vertex at the current position.","title":"drawVertex()"},{"location":"Pen/#finishdrawing","text":"Finishes the drawing, actually creating the geometry. Also resets the vertices of this instance of Pen .","title":"finishDrawing()"},{"location":"QueryOptions/","text":"QueryOptions The QueryOptions class is used to query the user for their input. It effectively works the same as specifying script options in the script's metadata, except that the QueryOptions class works at run-time. Example: let qo = new QueryOptions(); qo.addOption('length', 'Length of the sides', 0, 128); qo.addOption('numsides', 'Number of sides', 0, 5); qo.query(); showMessage('You want ' + qo.options.numsides + ' sides with a length of ' + qo.options.length); Constructors QueryOptions() Initializes a new QueryOptions object. Properties options Object containing all the added options as properties. Methods addOption(name, description, type, defaultvalue) Adds a parameter to query Parameters name: Name of the variable that the queried value is stored in description: Textual description of the parameter type: UniversalType value of the parameter defaultvalue: Default value of the parameter addOption(name, description, type, defaultvalue, enumvalues) Adds a parameter to query Parameters name: Name of the variable that the queried value is stored in description: Textual description of the parameter type: UniversalType value of the parameter defaultvalue: Default value of the parameter clear() Removes all parameters query() Queries all parameters. Options a window where the user can enter values for the options added through addOption() . Return value True if OK was pressed, otherwise false","title":"QueryOptions"},{"location":"QueryOptions/#queryoptions","text":"The QueryOptions class is used to query the user for their input. It effectively works the same as specifying script options in the script's metadata, except that the QueryOptions class works at run-time. Example: let qo = new QueryOptions(); qo.addOption('length', 'Length of the sides', 0, 128); qo.addOption('numsides', 'Number of sides', 0, 5); qo.query(); showMessage('You want ' + qo.options.numsides + ' sides with a length of ' + qo.options.length);","title":"QueryOptions"},{"location":"QueryOptions/#constructors","text":"","title":"Constructors"},{"location":"QueryOptions/#queryoptions_1","text":"Initializes a new QueryOptions object.","title":"QueryOptions()"},{"location":"QueryOptions/#properties","text":"","title":"Properties"},{"location":"QueryOptions/#options","text":"Object containing all the added options as properties.","title":"options"},{"location":"QueryOptions/#methods","text":"","title":"Methods"},{"location":"QueryOptions/#addoptionname-description-type-defaultvalue","text":"Adds a parameter to query","title":"addOption(name, description, type, defaultvalue)"},{"location":"QueryOptions/#parameters","text":"name: Name of the variable that the queried value is stored in description: Textual description of the parameter type: UniversalType value of the parameter defaultvalue: Default value of the parameter","title":"Parameters"},{"location":"QueryOptions/#addoptionname-description-type-defaultvalue-enumvalues","text":"Adds a parameter to query","title":"addOption(name, description, type, defaultvalue, enumvalues)"},{"location":"QueryOptions/#parameters_1","text":"name: Name of the variable that the queried value is stored in description: Textual description of the parameter type: UniversalType value of the parameter defaultvalue: Default value of the parameter","title":"Parameters"},{"location":"QueryOptions/#clear","text":"Removes all parameters","title":"clear()"},{"location":"QueryOptions/#query","text":"Queries all parameters. Options a window where the user can enter values for the options added through addOption() .","title":"query()"},{"location":"QueryOptions/#return-value","text":"True if OK was pressed, otherwise false","title":"Return value"},{"location":"Sector/","text":"Sector Properties brightness The Sector 's brightness. ceilingHeight Ceiling height of the Sector . ceilingTexture Ceiling texture of the Sector . fields UDMF fields. It's an object with the fields as properties. s.fields.comment = 'This is a comment'; s.fields['comment'] = 'This is a comment'; // Also works s.fields.xscalefloor = 2.0; t.score = 100; It is also possible to define new fields: s.fields.user_myboolfield = true; There are some restrictions, though: it only works for fields that are not in the base UDMF standard, since those are handled directly in the respective class it does not work for flags. While they are technically also UDMF fields, they are handled in the flags field of the respective class (where applicable) JavaScript does not distinguish between integer and floating point numbers, it only has floating point numbers (of double precision). For fields where UDB knows that they are integers this it not a problem, since it'll automatically convert the floating point numbers to integers (dropping the fractional part). However, if you need to specify an integer value for an unknown or custom field you have to work around this limitation, using the UniValue class: s.fields.user_myintfield = new UniValue(0, 25); // Sets the 'user_myintfield' field to an integer value of 25 flags Sector flags. It's an object with the flags as properties. Only available in UDMF. s.flags['noattack'] = true; // Monsters in this sector don't attack s.flags.noattack = true; // Also works floorHeight Floor height of the Sector . floorTexture Floor texture of the Sector . index The Sector 's index. Read-only. marked If the Sector is marked or not. It is used to mark map elements that were created or changed (for example after drawing new geometry). selected If the Sector is selected or not. special The Sector 's special type. tag The Sector 's tag. Methods addTag(tag) Adds a tag to the Sector . UDMF only. Supported game configurations only. Parameters tag: Tag to add Return value true when the tag was added, false when the tag already exists clearFlags() Clears all flags. copyPropertiesTo(s) Copies the properties from this Sector to another. Parameters s: the Sector to copy the properties to delete() Deletes the Sector and its Sidedef s. getSidedefs() Returns an Array of all Sidedef s of the Sector . Return value Array of the Sector 's Sidedef s getTags() Returns an Array of the Sector 's tags. UDMF only. Supported game configurations only. Return value Array of tags intersect(p) Checks if the given point is in this Sector or not. The given point can be a Vector2D or an Array of two numbers. if(s.intersect(new Vector2D(32, 64))) log('Point is in the sector!'); if(s.intersect([ 32, 64 ])) log('Point is in the sector!'); Parameters p: Point to test Return value missing join(other) Joins this Sector with another Sector . Lines shared between the sectors will not be removed. Parameters other: Sector to join with removeTag(tag) Removes a tag from the Sector . UDMF only. Supported game configurations only. Parameters tag: Tag to remove Return value true when the tag was removed successfully, false when the tag did not exist","title":"Sector"},{"location":"Sector/#sector","text":"","title":"Sector"},{"location":"Sector/#properties","text":"","title":"Properties"},{"location":"Sector/#brightness","text":"The Sector 's brightness.","title":"brightness"},{"location":"Sector/#ceilingheight","text":"Ceiling height of the Sector .","title":"ceilingHeight"},{"location":"Sector/#ceilingtexture","text":"Ceiling texture of the Sector .","title":"ceilingTexture"},{"location":"Sector/#fields","text":"UDMF fields. It's an object with the fields as properties. s.fields.comment = 'This is a comment'; s.fields['comment'] = 'This is a comment'; // Also works s.fields.xscalefloor = 2.0; t.score = 100; It is also possible to define new fields: s.fields.user_myboolfield = true; There are some restrictions, though: it only works for fields that are not in the base UDMF standard, since those are handled directly in the respective class it does not work for flags. While they are technically also UDMF fields, they are handled in the flags field of the respective class (where applicable) JavaScript does not distinguish between integer and floating point numbers, it only has floating point numbers (of double precision). For fields where UDB knows that they are integers this it not a problem, since it'll automatically convert the floating point numbers to integers (dropping the fractional part). However, if you need to specify an integer value for an unknown or custom field you have to work around this limitation, using the UniValue class: s.fields.user_myintfield = new UniValue(0, 25); // Sets the 'user_myintfield' field to an integer value of 25","title":"fields"},{"location":"Sector/#flags","text":"Sector flags. It's an object with the flags as properties. Only available in UDMF. s.flags['noattack'] = true; // Monsters in this sector don't attack s.flags.noattack = true; // Also works","title":"flags"},{"location":"Sector/#floorheight","text":"Floor height of the Sector .","title":"floorHeight"},{"location":"Sector/#floortexture","text":"Floor texture of the Sector .","title":"floorTexture"},{"location":"Sector/#index","text":"The Sector 's index. Read-only.","title":"index"},{"location":"Sector/#marked","text":"If the Sector is marked or not. It is used to mark map elements that were created or changed (for example after drawing new geometry).","title":"marked"},{"location":"Sector/#selected","text":"If the Sector is selected or not.","title":"selected"},{"location":"Sector/#special","text":"The Sector 's special type.","title":"special"},{"location":"Sector/#tag","text":"The Sector 's tag.","title":"tag"},{"location":"Sector/#methods","text":"","title":"Methods"},{"location":"Sector/#addtagtag","text":"Adds a tag to the Sector . UDMF only. Supported game configurations only.","title":"addTag(tag)"},{"location":"Sector/#parameters","text":"tag: Tag to add","title":"Parameters"},{"location":"Sector/#return-value","text":"true when the tag was added, false when the tag already exists","title":"Return value"},{"location":"Sector/#clearflags","text":"Clears all flags.","title":"clearFlags()"},{"location":"Sector/#copypropertiestos","text":"Copies the properties from this Sector to another.","title":"copyPropertiesTo(s)"},{"location":"Sector/#parameters_1","text":"s: the Sector to copy the properties to","title":"Parameters"},{"location":"Sector/#delete","text":"Deletes the Sector and its Sidedef s.","title":"delete()"},{"location":"Sector/#getsidedefs","text":"Returns an Array of all Sidedef s of the Sector .","title":"getSidedefs()"},{"location":"Sector/#return-value_1","text":"Array of the Sector 's Sidedef s","title":"Return value"},{"location":"Sector/#gettags","text":"Returns an Array of the Sector 's tags. UDMF only. Supported game configurations only.","title":"getTags()"},{"location":"Sector/#return-value_2","text":"Array of tags","title":"Return value"},{"location":"Sector/#intersectp","text":"Checks if the given point is in this Sector or not. The given point can be a Vector2D or an Array of two numbers. if(s.intersect(new Vector2D(32, 64))) log('Point is in the sector!'); if(s.intersect([ 32, 64 ])) log('Point is in the sector!');","title":"intersect(p)"},{"location":"Sector/#parameters_2","text":"p: Point to test","title":"Parameters"},{"location":"Sector/#return-value_3","text":"missing","title":"Return value"},{"location":"Sector/#joinother","text":"Joins this Sector with another Sector . Lines shared between the sectors will not be removed.","title":"join(other)"},{"location":"Sector/#parameters_3","text":"other: Sector to join with","title":"Parameters"},{"location":"Sector/#removetagtag","text":"Removes a tag from the Sector . UDMF only. Supported game configurations only.","title":"removeTag(tag)"},{"location":"Sector/#parameters_4","text":"tag: Tag to remove","title":"Parameters"},{"location":"Sector/#return-value_4","text":"true when the tag was removed successfully, false when the tag did not exist","title":"Return value"},{"location":"Sidedef/","text":"Sidedef Properties angle The Sidedef 's angle in degrees. Read-only. angleRad The Sidedef 's angle in radians. Read-only. fields UDMF fields. It's an object with the fields as properties. s.fields.comment = 'This is a comment'; s.fields['comment'] = 'This is a comment'; // Also works s.fields.xscalefloor = 2.0; t.score = 100; It is also possible to define new fields: s.fields.user_myboolfield = true; There are some restrictions, though: it only works for fields that are not in the base UDMF standard, since those are handled directly in the respective class it does not work for flags. While they are technically also UDMF fields, they are handled in the flags field of the respective class (where applicable) JavaScript does not distinguish between integer and floating point numbers, it only has floating point numbers (of double precision). For fields where UDB knows that they are integers this it not a problem, since it'll automatically convert the floating point numbers to integers (dropping the fractional part). However, if you need to specify an integer value for an unknown or custom field you have to work around this limitation, using the UniValue class: s.fields.user_myintfield = new UniValue(0, 25); // Sets the 'user_myintfield' field to an integer value of 25 flags Sidedef flags. It's an object with the flags as properties. Only available in UDMF. s.flags['noattack'] = true; // Monsters in this sector don't attack s.flags.noattack = true; // Also works index The Sidedef 's index. Read-only. isFront true if this Sidedef is the front of its Linedef , otherwise false . Read-only. line The Linedef the Sidedef belongs to. Read-only. lowerTexture The Sidedef 's lower texture. middleTexture The Sidedef 's middle texture. offsetX The x offset of the Sidedef 's textures. offsetY The y offset of the Sidedef 's textures. other The Sidedef on the other side of this Sidedef 's Linedef . Returns null if there is no other. Read-only. sector The Sector the Sidedef belongs to. Read-only. upperTexture The Sidedef 's upper texture.","title":"Sidedef"},{"location":"Sidedef/#sidedef","text":"","title":"Sidedef"},{"location":"Sidedef/#properties","text":"","title":"Properties"},{"location":"Sidedef/#angle","text":"The Sidedef 's angle in degrees. Read-only.","title":"angle"},{"location":"Sidedef/#anglerad","text":"The Sidedef 's angle in radians. Read-only.","title":"angleRad"},{"location":"Sidedef/#fields","text":"UDMF fields. It's an object with the fields as properties. s.fields.comment = 'This is a comment'; s.fields['comment'] = 'This is a comment'; // Also works s.fields.xscalefloor = 2.0; t.score = 100; It is also possible to define new fields: s.fields.user_myboolfield = true; There are some restrictions, though: it only works for fields that are not in the base UDMF standard, since those are handled directly in the respective class it does not work for flags. While they are technically also UDMF fields, they are handled in the flags field of the respective class (where applicable) JavaScript does not distinguish between integer and floating point numbers, it only has floating point numbers (of double precision). For fields where UDB knows that they are integers this it not a problem, since it'll automatically convert the floating point numbers to integers (dropping the fractional part). However, if you need to specify an integer value for an unknown or custom field you have to work around this limitation, using the UniValue class: s.fields.user_myintfield = new UniValue(0, 25); // Sets the 'user_myintfield' field to an integer value of 25","title":"fields"},{"location":"Sidedef/#flags","text":"Sidedef flags. It's an object with the flags as properties. Only available in UDMF. s.flags['noattack'] = true; // Monsters in this sector don't attack s.flags.noattack = true; // Also works","title":"flags"},{"location":"Sidedef/#index","text":"The Sidedef 's index. Read-only.","title":"index"},{"location":"Sidedef/#isfront","text":"true if this Sidedef is the front of its Linedef , otherwise false . Read-only.","title":"isFront"},{"location":"Sidedef/#line","text":"The Linedef the Sidedef belongs to. Read-only.","title":"line"},{"location":"Sidedef/#lowertexture","text":"The Sidedef 's lower texture.","title":"lowerTexture"},{"location":"Sidedef/#middletexture","text":"The Sidedef 's middle texture.","title":"middleTexture"},{"location":"Sidedef/#offsetx","text":"The x offset of the Sidedef 's textures.","title":"offsetX"},{"location":"Sidedef/#offsety","text":"The y offset of the Sidedef 's textures.","title":"offsetY"},{"location":"Sidedef/#other","text":"The Sidedef on the other side of this Sidedef 's Linedef . Returns null if there is no other. Read-only.","title":"other"},{"location":"Sidedef/#sector","text":"The Sector the Sidedef belongs to. Read-only.","title":"sector"},{"location":"Sidedef/#uppertexture","text":"The Sidedef 's upper texture.","title":"upperTexture"},{"location":"Thing/","text":"Thing Properties action Thing action. Hexen and UDMF only. angle Angle of the Thing in degrees, see https://doomwiki.org/wiki/Angle. angleRad Angle of the Thing in radians. args Array of arguments of the Thing . Number of arguments depends on game config (usually 5). Hexen format and UDMF only. fields UDMF fields. It's an object with the fields as properties. s.fields.comment = 'This is a comment'; s.fields['comment'] = 'This is a comment'; // Also works s.fields.xscalefloor = 2.0; t.score = 100; It is also possible to define new fields: s.fields.user_myboolfield = true; There are some restrictions, though: it only works for fields that are not in the base UDMF standard, since those are handled directly in the respective class it does not work for flags. While they are technically also UDMF fields, they are handled in the flags field of the respective class (where applicable) JavaScript does not distinguish between integer and floating point numbers, it only has floating point numbers (of double precision). For fields where UDB knows that they are integers this it not a problem, since it'll automatically convert the floating point numbers to integers (dropping the fractional part). However, if you need to specify an integer value for an unknown or custom field you have to work around this limitation, using the UniValue class: s.fields.user_myintfield = new UniValue(0, 25); // Sets the 'user_myintfield' field to an integer value of 25 flags Thing flags. It's an object with the flags as properties. In Doom format and Hexen format they are identified by numbers, in UDMF by their name. Doom and Hexen: t.flags[\"8\"] = true; // Set the ambush flag UDMF: t.flags['ambush'] = true; // Set the ambush flag t.flags.ambush = true; // Also works index Index of the Thing . Read-only. marked If the Thing is marked or not. It is used to mark map elements that were created or changed (for example after drawing new geometry). pitch Pitch of the Thing in degrees. Only valid for supporting game configurations. position Position of the Thing . It's an object with x , y , and z properties. The latter is only relevant in Hexen format and UDMF. The x , y , and z accept numbers: t.position.x = 32; t.position.y = 64; It's also possible to set all fields immediately by assigning either a Vector2D , Vector3D , or an array of numbers: t.position = new Vector2D(32, 64); t.position = new Vector3D(32, 64, 128); t.position = [ 32, 64 ]; t.position = [ 32, 64, 128 ]; roll Roll of the Thing in degrees. Only valid for supporting game configurations. selected If the Thing is selected or not. tag Thing tag. UDMF only. type Type of the Thing . Methods clearFlags() Clears all flags. copyPropertiesTo(t) Copies the properties from this Thing to another. Parameters t: The Thing to copy the properties to delete() Deletes the Thing . distanceTo(pos) Gets the distance between this Thing and the given point. The point can be either a Vector2D or an array of numbers. t.distanceToSq(new Vector2D(32, 64)); t.distanceToSq([ 32, 64 ]); Parameters pos: Point to calculate the distance to. Return value Distance to pos distanceToSq(pos) Gets the squared distance between this Thing and the given point. The point can be either a Vector2D or an array of numbers. t.distanceToSq(new Vector2D(32, 64)); t.distanceToSq([ 32, 64 ]); Parameters pos: Point to calculate the squared distance to. Return value Distance to pos snapToAccuracy() Snaps the Thing 's position to the map format's accuracy. snapToGrid() Snaps the Thing 's position to the grid.","title":"Thing"},{"location":"Thing/#thing","text":"","title":"Thing"},{"location":"Thing/#properties","text":"","title":"Properties"},{"location":"Thing/#action","text":"Thing action. Hexen and UDMF only.","title":"action"},{"location":"Thing/#angle","text":"Angle of the Thing in degrees, see https://doomwiki.org/wiki/Angle.","title":"angle"},{"location":"Thing/#anglerad","text":"Angle of the Thing in radians.","title":"angleRad"},{"location":"Thing/#args","text":"Array of arguments of the Thing . Number of arguments depends on game config (usually 5). Hexen format and UDMF only.","title":"args"},{"location":"Thing/#fields","text":"UDMF fields. It's an object with the fields as properties. s.fields.comment = 'This is a comment'; s.fields['comment'] = 'This is a comment'; // Also works s.fields.xscalefloor = 2.0; t.score = 100; It is also possible to define new fields: s.fields.user_myboolfield = true; There are some restrictions, though: it only works for fields that are not in the base UDMF standard, since those are handled directly in the respective class it does not work for flags. While they are technically also UDMF fields, they are handled in the flags field of the respective class (where applicable) JavaScript does not distinguish between integer and floating point numbers, it only has floating point numbers (of double precision). For fields where UDB knows that they are integers this it not a problem, since it'll automatically convert the floating point numbers to integers (dropping the fractional part). However, if you need to specify an integer value for an unknown or custom field you have to work around this limitation, using the UniValue class: s.fields.user_myintfield = new UniValue(0, 25); // Sets the 'user_myintfield' field to an integer value of 25","title":"fields"},{"location":"Thing/#flags","text":"Thing flags. It's an object with the flags as properties. In Doom format and Hexen format they are identified by numbers, in UDMF by their name. Doom and Hexen: t.flags[\"8\"] = true; // Set the ambush flag UDMF: t.flags['ambush'] = true; // Set the ambush flag t.flags.ambush = true; // Also works","title":"flags"},{"location":"Thing/#index","text":"Index of the Thing . Read-only.","title":"index"},{"location":"Thing/#marked","text":"If the Thing is marked or not. It is used to mark map elements that were created or changed (for example after drawing new geometry).","title":"marked"},{"location":"Thing/#pitch","text":"Pitch of the Thing in degrees. Only valid for supporting game configurations.","title":"pitch"},{"location":"Thing/#position","text":"Position of the Thing . It's an object with x , y , and z properties. The latter is only relevant in Hexen format and UDMF. The x , y , and z accept numbers: t.position.x = 32; t.position.y = 64; It's also possible to set all fields immediately by assigning either a Vector2D , Vector3D , or an array of numbers: t.position = new Vector2D(32, 64); t.position = new Vector3D(32, 64, 128); t.position = [ 32, 64 ]; t.position = [ 32, 64, 128 ];","title":"position"},{"location":"Thing/#roll","text":"Roll of the Thing in degrees. Only valid for supporting game configurations.","title":"roll"},{"location":"Thing/#selected","text":"If the Thing is selected or not.","title":"selected"},{"location":"Thing/#tag","text":"Thing tag. UDMF only.","title":"tag"},{"location":"Thing/#type","text":"Type of the Thing .","title":"type"},{"location":"Thing/#methods","text":"","title":"Methods"},{"location":"Thing/#clearflags","text":"Clears all flags.","title":"clearFlags()"},{"location":"Thing/#copypropertiestot","text":"Copies the properties from this Thing to another.","title":"copyPropertiesTo(t)"},{"location":"Thing/#parameters","text":"t: The Thing to copy the properties to","title":"Parameters"},{"location":"Thing/#delete","text":"Deletes the Thing .","title":"delete()"},{"location":"Thing/#distancetopos","text":"Gets the distance between this Thing and the given point. The point can be either a Vector2D or an array of numbers. t.distanceToSq(new Vector2D(32, 64)); t.distanceToSq([ 32, 64 ]);","title":"distanceTo(pos)"},{"location":"Thing/#parameters_1","text":"pos: Point to calculate the distance to.","title":"Parameters"},{"location":"Thing/#return-value","text":"Distance to pos","title":"Return value"},{"location":"Thing/#distancetosqpos","text":"Gets the squared distance between this Thing and the given point. The point can be either a Vector2D or an array of numbers. t.distanceToSq(new Vector2D(32, 64)); t.distanceToSq([ 32, 64 ]);","title":"distanceToSq(pos)"},{"location":"Thing/#parameters_2","text":"pos: Point to calculate the squared distance to.","title":"Parameters"},{"location":"Thing/#return-value_1","text":"Distance to pos","title":"Return value"},{"location":"Thing/#snaptoaccuracy","text":"Snaps the Thing 's position to the map format's accuracy.","title":"snapToAccuracy()"},{"location":"Thing/#snaptogrid","text":"Snaps the Thing 's position to the grid.","title":"snapToGrid()"},{"location":"Vector2D/","text":"Vector2D Constructors Vector2D(v) Creates a new Vector2D from a point. let v = new Vector2D([ 32, 64 ]); Parameters v: The vector to create the Vector2D from Vector2D(x, y) Creates a new Vector2D from x and y coordinates let v = new Vector2D(32, 64); Parameters x: The x coordinate y: The y coordinate Static methods crossProduct(a, b) Returns the cross product of two Vector2D s. Parameters a: First Vector2D b: Second Vector2D Return value Cross product of the two vectors as Vector2D dotProduct(a, b) Returns the dot product of two Vector2D s. Parameters a: First Vector2D b: Second Vector2D Return value The dot product of the two vectors fromAngle(angle) Creates a Vector2D from an angle in degrees, Parameters angle: Angle in degrees Return value Vector as Vector2D fromAngleRad(angle) Creates a Vector2D from an angle in radians, Parameters angle: Angle in radians Return value Vector as Vector2D getAngle(a, b) Returns the angle between two Vector2D s in radians. Parameters a: First Vector2D b: Second Vector2D Return value Angle in radians getAngleRad(a, b) Returns the angle between two Vector2D s in radians Parameters a: First Vector2D b: Second Vector2D Return value Angle in radians getDistance(a, b) Returns the distance between two Vector2D s. Parameters a: First Vector2D b: Second Vector2D Return value The distance getDistanceSq(a, b) Returns the square distance between two Vector2D s. Parameters a: First Vector2D b: Second Vector2D Return value The squared distance reflect(v, m) Reflects a Vector2D over a mirror Vector2D . Parameters v: Vector2D to reflect m: Mirror Vector2D Return value The reflected vector as Vector2D reversed(v) Returns a reversed Vector2D . Parameters v: Vector2D to reverse Return value The reversed vector as Vector2D Methods getAngle() Returns the angle of the Vector2D in degree. Return value The angle of the Vector2D in degree getAngleRad() Returns the angle of the Vector2D in radians. Return value The angle of the Vector2D in radians getInverseTransformed(invoffsetx, invoffsety, invscalex, invscaley) Returns the inverse transformed vector as Vector2D . Parameters invoffsetx: X offset invoffsety: Y offset invscalex: X scale invscaley: Y scale Return value The inverse transformed vector as Vector2D getLength() Returns the length of the Vector2D . Return value The length of the Vector2D getLengthSq() Returns the square length of the Vector2D . Return value The square length of the Vector2D getNormal() Returns the normal of the Vector2D . Return value The normal as Vector2D getPerpendicular() Returns the perpendicular to the Vector2D . Return value The perpendicular as Vector2D getRotated(theta) Returns the rotated vector as Vector2D . Parameters theta: Angle in degree to rotate by Return value The rotated Vector2D getRotatedRad(theta) Returns the rotated vector as Vector2D . Parameters theta: Angle in radians to rotate by Return value The rotated Vector2D getSign() Returns a Vector2D with the sign of all components. Return value A Vector2D with the sign of all components getTransformed(offsetx, offsety, scalex, scaley) Returns the transformed vector as Vector2D . Parameters offsetx: X offset offsety: Y offset scalex: X scale scaley: Y scale Return value The transformed vector as Vector2D","title":"Vector2D"},{"location":"Vector2D/#vector2d","text":"","title":"Vector2D"},{"location":"Vector2D/#constructors","text":"","title":"Constructors"},{"location":"Vector2D/#vector2dv","text":"Creates a new Vector2D from a point. let v = new Vector2D([ 32, 64 ]);","title":"Vector2D(v)"},{"location":"Vector2D/#parameters","text":"v: The vector to create the Vector2D from","title":"Parameters"},{"location":"Vector2D/#vector2dx-y","text":"Creates a new Vector2D from x and y coordinates let v = new Vector2D(32, 64);","title":"Vector2D(x, y)"},{"location":"Vector2D/#parameters_1","text":"x: The x coordinate y: The y coordinate","title":"Parameters"},{"location":"Vector2D/#static-methods","text":"","title":"Static methods"},{"location":"Vector2D/#crossproducta-b","text":"Returns the cross product of two Vector2D s.","title":"crossProduct(a, b)"},{"location":"Vector2D/#parameters_2","text":"a: First Vector2D b: Second Vector2D","title":"Parameters"},{"location":"Vector2D/#return-value","text":"Cross product of the two vectors as Vector2D","title":"Return value"},{"location":"Vector2D/#dotproducta-b","text":"Returns the dot product of two Vector2D s.","title":"dotProduct(a, b)"},{"location":"Vector2D/#parameters_3","text":"a: First Vector2D b: Second Vector2D","title":"Parameters"},{"location":"Vector2D/#return-value_1","text":"The dot product of the two vectors","title":"Return value"},{"location":"Vector2D/#fromangleangle","text":"Creates a Vector2D from an angle in degrees,","title":"fromAngle(angle)"},{"location":"Vector2D/#parameters_4","text":"angle: Angle in degrees","title":"Parameters"},{"location":"Vector2D/#return-value_2","text":"Vector as Vector2D","title":"Return value"},{"location":"Vector2D/#fromangleradangle","text":"Creates a Vector2D from an angle in radians,","title":"fromAngleRad(angle)"},{"location":"Vector2D/#parameters_5","text":"angle: Angle in radians","title":"Parameters"},{"location":"Vector2D/#return-value_3","text":"Vector as Vector2D","title":"Return value"},{"location":"Vector2D/#getanglea-b","text":"Returns the angle between two Vector2D s in radians.","title":"getAngle(a, b)"},{"location":"Vector2D/#parameters_6","text":"a: First Vector2D b: Second Vector2D","title":"Parameters"},{"location":"Vector2D/#return-value_4","text":"Angle in radians","title":"Return value"},{"location":"Vector2D/#getanglerada-b","text":"Returns the angle between two Vector2D s in radians","title":"getAngleRad(a, b)"},{"location":"Vector2D/#parameters_7","text":"a: First Vector2D b: Second Vector2D","title":"Parameters"},{"location":"Vector2D/#return-value_5","text":"Angle in radians","title":"Return value"},{"location":"Vector2D/#getdistancea-b","text":"Returns the distance between two Vector2D s.","title":"getDistance(a, b)"},{"location":"Vector2D/#parameters_8","text":"a: First Vector2D b: Second Vector2D","title":"Parameters"},{"location":"Vector2D/#return-value_6","text":"The distance","title":"Return value"},{"location":"Vector2D/#getdistancesqa-b","text":"Returns the square distance between two Vector2D s.","title":"getDistanceSq(a, b)"},{"location":"Vector2D/#parameters_9","text":"a: First Vector2D b: Second Vector2D","title":"Parameters"},{"location":"Vector2D/#return-value_7","text":"The squared distance","title":"Return value"},{"location":"Vector2D/#reflectv-m","text":"Reflects a Vector2D over a mirror Vector2D .","title":"reflect(v, m)"},{"location":"Vector2D/#parameters_10","text":"v: Vector2D to reflect m: Mirror Vector2D","title":"Parameters"},{"location":"Vector2D/#return-value_8","text":"The reflected vector as Vector2D","title":"Return value"},{"location":"Vector2D/#reversedv","text":"Returns a reversed Vector2D .","title":"reversed(v)"},{"location":"Vector2D/#parameters_11","text":"v: Vector2D to reverse","title":"Parameters"},{"location":"Vector2D/#return-value_9","text":"The reversed vector as Vector2D","title":"Return value"},{"location":"Vector2D/#methods","text":"","title":"Methods"},{"location":"Vector2D/#getangle","text":"Returns the angle of the Vector2D in degree.","title":"getAngle()"},{"location":"Vector2D/#return-value_10","text":"The angle of the Vector2D in degree","title":"Return value"},{"location":"Vector2D/#getanglerad","text":"Returns the angle of the Vector2D in radians.","title":"getAngleRad()"},{"location":"Vector2D/#return-value_11","text":"The angle of the Vector2D in radians","title":"Return value"},{"location":"Vector2D/#getinversetransformedinvoffsetx-invoffsety-invscalex-invscaley","text":"Returns the inverse transformed vector as Vector2D .","title":"getInverseTransformed(invoffsetx, invoffsety, invscalex, invscaley)"},{"location":"Vector2D/#parameters_12","text":"invoffsetx: X offset invoffsety: Y offset invscalex: X scale invscaley: Y scale","title":"Parameters"},{"location":"Vector2D/#return-value_12","text":"The inverse transformed vector as Vector2D","title":"Return value"},{"location":"Vector2D/#getlength","text":"Returns the length of the Vector2D .","title":"getLength()"},{"location":"Vector2D/#return-value_13","text":"The length of the Vector2D","title":"Return value"},{"location":"Vector2D/#getlengthsq","text":"Returns the square length of the Vector2D .","title":"getLengthSq()"},{"location":"Vector2D/#return-value_14","text":"The square length of the Vector2D","title":"Return value"},{"location":"Vector2D/#getnormal","text":"Returns the normal of the Vector2D .","title":"getNormal()"},{"location":"Vector2D/#return-value_15","text":"The normal as Vector2D","title":"Return value"},{"location":"Vector2D/#getperpendicular","text":"Returns the perpendicular to the Vector2D .","title":"getPerpendicular()"},{"location":"Vector2D/#return-value_16","text":"The perpendicular as Vector2D","title":"Return value"},{"location":"Vector2D/#getrotatedtheta","text":"Returns the rotated vector as Vector2D .","title":"getRotated(theta)"},{"location":"Vector2D/#parameters_13","text":"theta: Angle in degree to rotate by","title":"Parameters"},{"location":"Vector2D/#return-value_17","text":"The rotated Vector2D","title":"Return value"},{"location":"Vector2D/#getrotatedradtheta","text":"Returns the rotated vector as Vector2D .","title":"getRotatedRad(theta)"},{"location":"Vector2D/#parameters_14","text":"theta: Angle in radians to rotate by","title":"Parameters"},{"location":"Vector2D/#return-value_18","text":"The rotated Vector2D","title":"Return value"},{"location":"Vector2D/#getsign","text":"Returns a Vector2D with the sign of all components.","title":"getSign()"},{"location":"Vector2D/#return-value_19","text":"A Vector2D with the sign of all components","title":"Return value"},{"location":"Vector2D/#gettransformedoffsetx-offsety-scalex-scaley","text":"Returns the transformed vector as Vector2D .","title":"getTransformed(offsetx, offsety, scalex, scaley)"},{"location":"Vector2D/#parameters_15","text":"offsetx: X offset offsety: Y offset scalex: X scale scaley: Y scale","title":"Parameters"},{"location":"Vector2D/#return-value_20","text":"The transformed vector as Vector2D","title":"Return value"},{"location":"Vector3D/","text":"Vector3D Constructors Vector3D(v) Creates a new Vector3D from a point. let v = new Vector3D([ 32, 64, 128 ]); Parameters v: The vector to create the Vector3D from Vector3D(x, y, z) Creates a new Vector3D from x and y coordinates let v = new Vector3D(32, 64, 128); Parameters x: The x coordinate y: The y coordinate z: The z coordinate Static methods crossProduct(a, b) Returns the cross product of two Vector3D s. Parameters a: First Vector3D b: Second Vector3D Return value Cross product of the two vectors as Vector3D dotProduct(a, b) Returns the dot product of two Vector3D s. Parameters a: First Vector3D b: Second Vector3D Return value The dot product of the two vectors fromAngleXY(angle) Creates a Vector3D from an angle in radians, Parameters angle: Angle on the x/y axes in degrees Return value Vector as Vector3D fromAngleXYRad(angle) Creates a Vector3D from an angle in radians Parameters angle: Angle on the x/y axes in radians Return value Vector as Vector3D fromAngleXYZ(anglexy, anglez) Creates a Vector3D from two angles in degrees Parameters anglexy: Angle on the x/y axes in radians anglez: Angle on the z axis in radians Return value Vector as Vector3D fromAngleXYZRad(anglexy, anglez) Creates a Vector3D from two angles in radians Parameters anglexy: Angle on the x/y axes in radians anglez: Angle on the z axis in radians Return value Vector as Vector3D reflect(v, m) Reflects a Vector3D over a mirror Vector3D . Parameters v: Vector3D to reflect m: Mirror Vector3D Return value The reflected vector as Vector3D reversed(v) Returns a reversed Vector3D . Parameters v: Vector3D to reverse Return value The reversed vector as Vector3D Methods getAngleXY() Returns the angle of the Vector3D in degrees. Return value The angle of the Vector3D in degrees getAngleXYRad() Returns the x/y angle of the Vector3D in radians. Return value The x/y angle of the Vector3D in radians getAngleZ() Returns the z angle of the Vector3D in degrees. Return value The z angle of the Vector3D in degrees getAngleZRad() Returns the z angle of the Vector3D in radians. Return value The z angle of the Vector3D in radians getLength() Returns the length of the Vector3D . Return value The length of the Vector3D getLengthSq() Returns the square length of the Vector3D . Return value The square length of the Vector3D getNormal() Returns the normal of the Vector3D . Return value The normal as Vector3D getScaled(scale) Return the scaled Vector3D . Parameters scale: Scale, where 1.0 is unscaled Return value The scaled Vector3D isFinite() Checks if the Vector3D is finite or not. Return value true if Vector3D is finite, otherwise false isNormalized() Checks if the Vector3D is normalized or not. Return value true if Vector3D is normalized, otherwise false","title":"Vector3D"},{"location":"Vector3D/#vector3d","text":"","title":"Vector3D"},{"location":"Vector3D/#constructors","text":"","title":"Constructors"},{"location":"Vector3D/#vector3dv","text":"Creates a new Vector3D from a point. let v = new Vector3D([ 32, 64, 128 ]);","title":"Vector3D(v)"},{"location":"Vector3D/#parameters","text":"v: The vector to create the Vector3D from","title":"Parameters"},{"location":"Vector3D/#vector3dx-y-z","text":"Creates a new Vector3D from x and y coordinates let v = new Vector3D(32, 64, 128);","title":"Vector3D(x, y, z)"},{"location":"Vector3D/#parameters_1","text":"x: The x coordinate y: The y coordinate z: The z coordinate","title":"Parameters"},{"location":"Vector3D/#static-methods","text":"","title":"Static methods"},{"location":"Vector3D/#crossproducta-b","text":"Returns the cross product of two Vector3D s.","title":"crossProduct(a, b)"},{"location":"Vector3D/#parameters_2","text":"a: First Vector3D b: Second Vector3D","title":"Parameters"},{"location":"Vector3D/#return-value","text":"Cross product of the two vectors as Vector3D","title":"Return value"},{"location":"Vector3D/#dotproducta-b","text":"Returns the dot product of two Vector3D s.","title":"dotProduct(a, b)"},{"location":"Vector3D/#parameters_3","text":"a: First Vector3D b: Second Vector3D","title":"Parameters"},{"location":"Vector3D/#return-value_1","text":"The dot product of the two vectors","title":"Return value"},{"location":"Vector3D/#fromanglexyangle","text":"Creates a Vector3D from an angle in radians,","title":"fromAngleXY(angle)"},{"location":"Vector3D/#parameters_4","text":"angle: Angle on the x/y axes in degrees","title":"Parameters"},{"location":"Vector3D/#return-value_2","text":"Vector as Vector3D","title":"Return value"},{"location":"Vector3D/#fromanglexyradangle","text":"Creates a Vector3D from an angle in radians","title":"fromAngleXYRad(angle)"},{"location":"Vector3D/#parameters_5","text":"angle: Angle on the x/y axes in radians","title":"Parameters"},{"location":"Vector3D/#return-value_3","text":"Vector as Vector3D","title":"Return value"},{"location":"Vector3D/#fromanglexyzanglexy-anglez","text":"Creates a Vector3D from two angles in degrees","title":"fromAngleXYZ(anglexy, anglez)"},{"location":"Vector3D/#parameters_6","text":"anglexy: Angle on the x/y axes in radians anglez: Angle on the z axis in radians","title":"Parameters"},{"location":"Vector3D/#return-value_4","text":"Vector as Vector3D","title":"Return value"},{"location":"Vector3D/#fromanglexyzradanglexy-anglez","text":"Creates a Vector3D from two angles in radians","title":"fromAngleXYZRad(anglexy, anglez)"},{"location":"Vector3D/#parameters_7","text":"anglexy: Angle on the x/y axes in radians anglez: Angle on the z axis in radians","title":"Parameters"},{"location":"Vector3D/#return-value_5","text":"Vector as Vector3D","title":"Return value"},{"location":"Vector3D/#reflectv-m","text":"Reflects a Vector3D over a mirror Vector3D .","title":"reflect(v, m)"},{"location":"Vector3D/#parameters_8","text":"v: Vector3D to reflect m: Mirror Vector3D","title":"Parameters"},{"location":"Vector3D/#return-value_6","text":"The reflected vector as Vector3D","title":"Return value"},{"location":"Vector3D/#reversedv","text":"Returns a reversed Vector3D .","title":"reversed(v)"},{"location":"Vector3D/#parameters_9","text":"v: Vector3D to reverse","title":"Parameters"},{"location":"Vector3D/#return-value_7","text":"The reversed vector as Vector3D","title":"Return value"},{"location":"Vector3D/#methods","text":"","title":"Methods"},{"location":"Vector3D/#getanglexy","text":"Returns the angle of the Vector3D in degrees.","title":"getAngleXY()"},{"location":"Vector3D/#return-value_8","text":"The angle of the Vector3D in degrees","title":"Return value"},{"location":"Vector3D/#getanglexyrad","text":"Returns the x/y angle of the Vector3D in radians.","title":"getAngleXYRad()"},{"location":"Vector3D/#return-value_9","text":"The x/y angle of the Vector3D in radians","title":"Return value"},{"location":"Vector3D/#getanglez","text":"Returns the z angle of the Vector3D in degrees.","title":"getAngleZ()"},{"location":"Vector3D/#return-value_10","text":"The z angle of the Vector3D in degrees","title":"Return value"},{"location":"Vector3D/#getanglezrad","text":"Returns the z angle of the Vector3D in radians.","title":"getAngleZRad()"},{"location":"Vector3D/#return-value_11","text":"The z angle of the Vector3D in radians","title":"Return value"},{"location":"Vector3D/#getlength","text":"Returns the length of the Vector3D .","title":"getLength()"},{"location":"Vector3D/#return-value_12","text":"The length of the Vector3D","title":"Return value"},{"location":"Vector3D/#getlengthsq","text":"Returns the square length of the Vector3D .","title":"getLengthSq()"},{"location":"Vector3D/#return-value_13","text":"The square length of the Vector3D","title":"Return value"},{"location":"Vector3D/#getnormal","text":"Returns the normal of the Vector3D .","title":"getNormal()"},{"location":"Vector3D/#return-value_14","text":"The normal as Vector3D","title":"Return value"},{"location":"Vector3D/#getscaledscale","text":"Return the scaled Vector3D .","title":"getScaled(scale)"},{"location":"Vector3D/#parameters_10","text":"scale: Scale, where 1.0 is unscaled","title":"Parameters"},{"location":"Vector3D/#return-value_15","text":"The scaled Vector3D","title":"Return value"},{"location":"Vector3D/#isfinite","text":"Checks if the Vector3D is finite or not.","title":"isFinite()"},{"location":"Vector3D/#return-value_16","text":"true if Vector3D is finite, otherwise false","title":"Return value"},{"location":"Vector3D/#isnormalized","text":"Checks if the Vector3D is normalized or not.","title":"isNormalized()"},{"location":"Vector3D/#return-value_17","text":"true if Vector3D is normalized, otherwise false","title":"Return value"},{"location":"Vertex/","text":"Vertex Properties ceilingZ The ceiling z position of the Vertex . Only available in UDMF. Only available for supported game configurations. fields UDMF fields. It's an object with the fields as properties. s.fields.comment = 'This is a comment'; s.fields['comment'] = 'This is a comment'; // Also works s.fields.xscalefloor = 2.0; t.score = 100; It is also possible to define new fields: s.fields.user_myboolfield = true; There are some restrictions, though: it only works for fields that are not in the base UDMF standard, since those are handled directly in the respective class it does not work for flags. While they are technically also UDMF fields, they are handled in the flags field of the respective class (where applicable) JavaScript does not distinguish between integer and floating point numbers, it only has floating point numbers (of double precision). For fields where UDB knows that they are integers this it not a problem, since it'll automatically convert the floating point numbers to integers (dropping the fractional part). However, if you need to specify an integer value for an unknown or custom field you have to work around this limitation, using the UniValue class: s.fields.user_myintfield = new UniValue(0, 25); // Sets the 'user_myintfield' field to an integer value of 25 floorZ The floor z position of the Vertex . Only available in UDMF. Only available for supported game configurations. index The vertex index. Read-only. marked If the Vertex is marked or not. It is used to mark map elements that were created or changed (for example after drawing new geometry). position Position of the Vertex . It's an object with x and y properties. The x and y accept numbers: v.position.x = 32; v.position.y = 64; It's also possible to set all fields immediately by assigning either a Vector2D , or an array of numbers: v.position = new Vector2D(32, 64); v.position = [ 32, 64 ]; selected If the Vertex is selected or not. Methods copyPropertiesTo(v) Copies the properties from this Vertex to another. Parameters v: the vertex to copy the properties to delete() Deletes the Vertex . Note that this can result in unclosed sectors. distanceTo(pos) Gets the distance between this Vertex and the given point. The point can be either a Vector2D or an array of numbers. v.distanceTo(new Vector2D(32, 64)); v.distanceTo([ 32, 64 ]); Parameters pos: Point to calculate the distance to. Return value Distance to pos distanceToSq(pos) Gets the squared distance between this Vertex and the given point. The point can be either a Vector2D or an array of numbers. v.distanceToSq(new Vector2D(32, 64)); v.distanceToSq([ 32, 64 ]); Parameters pos: Point to calculate the squared distance to. Return value Squared distance to pos getLinedefs() Gets all Linedefs that are connected to this Vertex . Return value Array of linedefs join(other) Joins this Vertex with another Vertex , deleting this Vertex and keeping the other. Parameters other: Vertex to join with nearestLinedef(pos) Returns the Linedef that is connected to this Vertex that is closest to the given point. Parameters pos: Point to get the nearest Linedef connected to this Vertex from Return value missing snapToAccuracy() Snaps the Vertex 's position to the map format's accuracy. snapToGrid() Snaps the Vertex 's position to the grid.","title":"Vertex"},{"location":"Vertex/#vertex","text":"","title":"Vertex"},{"location":"Vertex/#properties","text":"","title":"Properties"},{"location":"Vertex/#ceilingz","text":"The ceiling z position of the Vertex . Only available in UDMF. Only available for supported game configurations.","title":"ceilingZ"},{"location":"Vertex/#fields","text":"UDMF fields. It's an object with the fields as properties. s.fields.comment = 'This is a comment'; s.fields['comment'] = 'This is a comment'; // Also works s.fields.xscalefloor = 2.0; t.score = 100; It is also possible to define new fields: s.fields.user_myboolfield = true; There are some restrictions, though: it only works for fields that are not in the base UDMF standard, since those are handled directly in the respective class it does not work for flags. While they are technically also UDMF fields, they are handled in the flags field of the respective class (where applicable) JavaScript does not distinguish between integer and floating point numbers, it only has floating point numbers (of double precision). For fields where UDB knows that they are integers this it not a problem, since it'll automatically convert the floating point numbers to integers (dropping the fractional part). However, if you need to specify an integer value for an unknown or custom field you have to work around this limitation, using the UniValue class: s.fields.user_myintfield = new UniValue(0, 25); // Sets the 'user_myintfield' field to an integer value of 25","title":"fields"},{"location":"Vertex/#floorz","text":"The floor z position of the Vertex . Only available in UDMF. Only available for supported game configurations.","title":"floorZ"},{"location":"Vertex/#index","text":"The vertex index. Read-only.","title":"index"},{"location":"Vertex/#marked","text":"If the Vertex is marked or not. It is used to mark map elements that were created or changed (for example after drawing new geometry).","title":"marked"},{"location":"Vertex/#position","text":"Position of the Vertex . It's an object with x and y properties. The x and y accept numbers: v.position.x = 32; v.position.y = 64; It's also possible to set all fields immediately by assigning either a Vector2D , or an array of numbers: v.position = new Vector2D(32, 64); v.position = [ 32, 64 ];","title":"position"},{"location":"Vertex/#selected","text":"If the Vertex is selected or not.","title":"selected"},{"location":"Vertex/#methods","text":"","title":"Methods"},{"location":"Vertex/#copypropertiestov","text":"Copies the properties from this Vertex to another.","title":"copyPropertiesTo(v)"},{"location":"Vertex/#parameters","text":"v: the vertex to copy the properties to","title":"Parameters"},{"location":"Vertex/#delete","text":"Deletes the Vertex . Note that this can result in unclosed sectors.","title":"delete()"},{"location":"Vertex/#distancetopos","text":"Gets the distance between this Vertex and the given point. The point can be either a Vector2D or an array of numbers. v.distanceTo(new Vector2D(32, 64)); v.distanceTo([ 32, 64 ]);","title":"distanceTo(pos)"},{"location":"Vertex/#parameters_1","text":"pos: Point to calculate the distance to.","title":"Parameters"},{"location":"Vertex/#return-value","text":"Distance to pos","title":"Return value"},{"location":"Vertex/#distancetosqpos","text":"Gets the squared distance between this Vertex and the given point. The point can be either a Vector2D or an array of numbers. v.distanceToSq(new Vector2D(32, 64)); v.distanceToSq([ 32, 64 ]);","title":"distanceToSq(pos)"},{"location":"Vertex/#parameters_2","text":"pos: Point to calculate the squared distance to.","title":"Parameters"},{"location":"Vertex/#return-value_1","text":"Squared distance to pos","title":"Return value"},{"location":"Vertex/#getlinedefs","text":"Gets all Linedefs that are connected to this Vertex .","title":"getLinedefs()"},{"location":"Vertex/#return-value_2","text":"Array of linedefs","title":"Return value"},{"location":"Vertex/#joinother","text":"Joins this Vertex with another Vertex , deleting this Vertex and keeping the other.","title":"join(other)"},{"location":"Vertex/#parameters_3","text":"other: Vertex to join with","title":"Parameters"},{"location":"Vertex/#nearestlinedefpos","text":"Returns the Linedef that is connected to this Vertex that is closest to the given point.","title":"nearestLinedef(pos)"},{"location":"Vertex/#parameters_4","text":"pos: Point to get the nearest Linedef connected to this Vertex from","title":"Parameters"},{"location":"Vertex/#return-value_3","text":"missing","title":"Return value"},{"location":"Vertex/#snaptoaccuracy","text":"Snaps the Vertex 's position to the map format's accuracy.","title":"snapToAccuracy()"},{"location":"Vertex/#snaptogrid","text":"Snaps the Vertex 's position to the grid.","title":"snapToGrid()"},{"location":"gettingstarted/","text":"Getting started Introduction UDB Script allows the user to run custom JavaScript code on the currently opened map. This includes modifying existing map elements (like things or sectors), or creating completely new map elements (i.e. drawing lines, adding things etc.). It uses the Jint interpreter. Directory structure Scripts are automatically found if they are placed in the correct directory structure. The directory structure is in the UDB installation folder and looks like this: .\\UDBScript\\ .\\UDBScript\\Libraries\\ .\\UDBScript\\Scripts\\ All files ending on .js in the Libraries directory are loaded (parsed and executed) every time a script is run. It is used to provide common functionality to multiple script. Currently there's the Pen.js library file that simplifies drawing geometry (it's inspired by the DBX Lua Pen class). All files ending on .js in the Scripts directory (and its subdirectories) are added to the Scripts docker. They are only run on the user's command. Setting a key to execute scripts A key to execute a script can be set by going to Tools -> Preferences -> Controls , and then filtering by execute . The docker Scripts can be accessed, configured, and run through the provided docker. Selecting a script will show it's description (if available) and configuration options. Default values in the script options will be shown in gray, deviating values as black. Pressing the Reset button will reset all values to the default. Scripts can either be run using the Run button, or by pressing the assigned key (see previous section). Note that scripts might rely on the mouse cursor being somewhere in the map space, in which case they will not run correctly using the Run button. This should be intercepted by the script. Currently the available scripts are only read once at start, to add new scripts you have to restart UDB. Writing scripts Script metadata Scripts can contain metadata at the top of the file to provide information about the script as well as available script options. The metadata is specified as JavaScript template strings, i.e. strings enclosed by backticks ( ` ). The template string has to start with a # , followed by a command, followed by the payload, followed by a ; . Attention The template string has to be followed by a ; . All script metadata has to be at the top of the file and may not be interrupted by any other constructs (like variable declaraion or assignment). If such constructs are detected parsing of the metadata will stop. Example: `#name Super Useful Script`; Currently the following metadata commands are available: name : name of the script that will be shown in the docker. If omitted the capitalized file name without the extension will be used as the script name description : description of the script. Should include what the script does and what the requirements are (for example if something has to be selected for the script to work) scriptoptions : the script options. The payload has to be in UDB's configuration file format (see below) version : the feature version the script needs to run Setting script options The script options that can be set in the docker prior to running the script can be defined using the scriptoptions metadata command. The payload has to be in UDB's configuration file format. The payload consists of one or more blocks, each defining an option. The blocks have the following format: `#scriptoptions <name> { description = <description>; default = <defaultvalue>; type = <type>; enumvalues { <values> } } `; Note The eunumvalues field is only used with the appropriate type value Example: `#scriptoptions length { description = \"Length of closet\"; default = 256; type = 0; // Integer } direction { description = \"Direction of closet\"; default = \"North\"; type = 11; // Enum enumvalues { 0 = \"North\"; 1 = \"East\"; 2 = \"South\"; 3 = \"West\"; } } `; The following types are currently available: 0: integer 1: floating point number 2: string 3: boolean 5: sector effect* 6: texture* 7: flat* 8: angle in degrees* 9: angle in radians* 10: color* 11: enumeration** 13: sector tag* 14: thing tag* 15: linedef tag* 17: angle in degrees as floating point number* 18: thing type* 19: thing class* 20: random integer 21: random floating point number 22: byte angle* 23: thing radius* 24: thing height* 25: PolyObject number* * these are quality of life type for interger, floating point numbers, and strings. Clicking into their field will show context sensitive controls. For example when using type 3 (boolean) there will be drop down list where you can choose between true or false , when using type 6 (texture) a button button that will open the texture browser, when using type 13 (sector tag) will show a drop down list of sector tags in the map etc. Accessing script options in a script The script option can be accessed through the global object ScriptOptions . This object has properties by the name of the blocks of the script option definition, and contains the value set in the docker. Example: `#scriptoptions length { description = \"Length of closet\"; default = 256; type = 0; // Integer } `; showMessage('The given length is ' + ScriptOptions.length); Tip You can also query options at runtime. See the QueryOptions API documentation. Working with map elements Map elements (things, sectors, sidedefs etc.) can be accessed through the global Map object. This object has methods that return an array of map elements, for example Map.getSectors() returns an array of Sector objects, which are are all sectors in the map. There are also methods to get all selected (for example Map.getSelectedSectors() ) and marked (for example Map.getMarkedSectors() ) map elements. These map elements can then be modified, see the documentation for the particular map element type in the API section. Note \"Marking\" a map element is a way to denote that something happened to this map element. For example when using the Map.drawLines() method all new geometry will be marked. Creating new geometry New map geometry can be created with the drawLines() method of the Map object. It accepts an array of coordinates in map space. The coordinates can either by instances of Vector2D , Vector3D , or an array of numbers. Example 1: Map.drawLines([ new Vector2D(0, 0), new Vector2D(64, 0), new Vector2D(64, 64), new Vector2D(0, 64), new Vector2D(0, 0) ]); Example 2: Map.drawLines([ [ 0, 0 ], [ 64, 0 ], [ 64, 64 ], [ 0, 64 ], [ 0, 0 ] ]); Both examples are equivalent. The advantage of using Vector2D or Vector3D is that they have many math related methods built-in. Another method to draw geometry is using the Pen class - which itself is implemented as a library written in JavaScript. It's inspired by the DoomBuilder X class of the same name. It provides some quality of life features, since it creates coordinates relative to the current position - just like moving a pen around a sheet of paper, or Turtle graphics . Naive implementation of the above example using the Pen class: let p = new Pen(); p.moveTo([0, 0]); p.drawVertex(); p.moveTo([64, 0]); p.drawVertex(); p.moveTo([64, 64]); p.drawVertex(); p.moveTo([0, 64]); p.drawVertex(); p.finishDrawing(); Using the strenghts of the Pen class: let p = new Pen([0, 0]); for(let i=0; i < 4; i++) { p.drawVertex(); p.moveForward(64); p.turnRight(); } p.finishDrawing(); Ending scripts prematurely Normally a script ends when the last instruction is executed. But there can be situations where you want to end a script early. exit() : this global function ends the script with success. It can optionally take a string argument that is shown in the status bar upon ending the script die() : this global function ends the script with a failure. This means that it will undo any changes the script has made. It can optionally take a string argument that is shown in the status bar upon ending the script throw : throws an exception. Only ends the script if it's not caught in a try / catch block. If not caught it'll end the script with a failure. This means that it will undo any changes the script has made. The string given as a parameter is shown in the status bar upon ending the script Communicating with the user Sometimes you might want to let the script directly communicate with the user. To do that there are two global functions, showMessage() and showMessageYesNo() . showMessage() : shows a message box with an \"OK\" button and the text given as the parameter showMessage('Hello, world!'); showMessageYesNo() : shows a message box with an \"Yes\" and \"No\" button and the text given as the parameter. Returns true if the \"Yes\" button was clicked, and false if the \"No\" button was clicked if(showMessageYesNo('Are you sure you want to replace all imps with Arch-Viles? That\\'s not remotely fair!')) { Map.getThings().filter(t => t.type == 3001).forEach(t => t.type=64); }","title":"Getting started"},{"location":"gettingstarted/#getting-started","text":"","title":"Getting started"},{"location":"gettingstarted/#introduction","text":"UDB Script allows the user to run custom JavaScript code on the currently opened map. This includes modifying existing map elements (like things or sectors), or creating completely new map elements (i.e. drawing lines, adding things etc.). It uses the Jint interpreter.","title":"Introduction"},{"location":"gettingstarted/#directory-structure","text":"Scripts are automatically found if they are placed in the correct directory structure. The directory structure is in the UDB installation folder and looks like this: .\\UDBScript\\ .\\UDBScript\\Libraries\\ .\\UDBScript\\Scripts\\ All files ending on .js in the Libraries directory are loaded (parsed and executed) every time a script is run. It is used to provide common functionality to multiple script. Currently there's the Pen.js library file that simplifies drawing geometry (it's inspired by the DBX Lua Pen class). All files ending on .js in the Scripts directory (and its subdirectories) are added to the Scripts docker. They are only run on the user's command.","title":"Directory structure"},{"location":"gettingstarted/#setting-a-key-to-execute-scripts","text":"A key to execute a script can be set by going to Tools -> Preferences -> Controls , and then filtering by execute .","title":"Setting a key to execute scripts"},{"location":"gettingstarted/#the-docker","text":"Scripts can be accessed, configured, and run through the provided docker. Selecting a script will show it's description (if available) and configuration options. Default values in the script options will be shown in gray, deviating values as black. Pressing the Reset button will reset all values to the default. Scripts can either be run using the Run button, or by pressing the assigned key (see previous section). Note that scripts might rely on the mouse cursor being somewhere in the map space, in which case they will not run correctly using the Run button. This should be intercepted by the script. Currently the available scripts are only read once at start, to add new scripts you have to restart UDB.","title":"The docker"},{"location":"gettingstarted/#writing-scripts","text":"","title":"Writing scripts"},{"location":"gettingstarted/#script-metadata","text":"Scripts can contain metadata at the top of the file to provide information about the script as well as available script options. The metadata is specified as JavaScript template strings, i.e. strings enclosed by backticks ( ` ). The template string has to start with a # , followed by a command, followed by the payload, followed by a ; . Attention The template string has to be followed by a ; . All script metadata has to be at the top of the file and may not be interrupted by any other constructs (like variable declaraion or assignment). If such constructs are detected parsing of the metadata will stop. Example: `#name Super Useful Script`; Currently the following metadata commands are available: name : name of the script that will be shown in the docker. If omitted the capitalized file name without the extension will be used as the script name description : description of the script. Should include what the script does and what the requirements are (for example if something has to be selected for the script to work) scriptoptions : the script options. The payload has to be in UDB's configuration file format (see below) version : the feature version the script needs to run","title":"Script metadata"},{"location":"gettingstarted/#setting-script-options","text":"The script options that can be set in the docker prior to running the script can be defined using the scriptoptions metadata command. The payload has to be in UDB's configuration file format. The payload consists of one or more blocks, each defining an option. The blocks have the following format: `#scriptoptions <name> { description = <description>; default = <defaultvalue>; type = <type>; enumvalues { <values> } } `; Note The eunumvalues field is only used with the appropriate type value Example: `#scriptoptions length { description = \"Length of closet\"; default = 256; type = 0; // Integer } direction { description = \"Direction of closet\"; default = \"North\"; type = 11; // Enum enumvalues { 0 = \"North\"; 1 = \"East\"; 2 = \"South\"; 3 = \"West\"; } } `; The following types are currently available: 0: integer 1: floating point number 2: string 3: boolean 5: sector effect* 6: texture* 7: flat* 8: angle in degrees* 9: angle in radians* 10: color* 11: enumeration** 13: sector tag* 14: thing tag* 15: linedef tag* 17: angle in degrees as floating point number* 18: thing type* 19: thing class* 20: random integer 21: random floating point number 22: byte angle* 23: thing radius* 24: thing height* 25: PolyObject number* * these are quality of life type for interger, floating point numbers, and strings. Clicking into their field will show context sensitive controls. For example when using type 3 (boolean) there will be drop down list where you can choose between true or false , when using type 6 (texture) a button button that will open the texture browser, when using type 13 (sector tag) will show a drop down list of sector tags in the map etc.","title":"Setting script options"},{"location":"gettingstarted/#accessing-script-options-in-a-script","text":"The script option can be accessed through the global object ScriptOptions . This object has properties by the name of the blocks of the script option definition, and contains the value set in the docker. Example: `#scriptoptions length { description = \"Length of closet\"; default = 256; type = 0; // Integer } `; showMessage('The given length is ' + ScriptOptions.length); Tip You can also query options at runtime. See the QueryOptions API documentation.","title":"Accessing script options in a script"},{"location":"gettingstarted/#working-with-map-elements","text":"Map elements (things, sectors, sidedefs etc.) can be accessed through the global Map object. This object has methods that return an array of map elements, for example Map.getSectors() returns an array of Sector objects, which are are all sectors in the map. There are also methods to get all selected (for example Map.getSelectedSectors() ) and marked (for example Map.getMarkedSectors() ) map elements. These map elements can then be modified, see the documentation for the particular map element type in the API section. Note \"Marking\" a map element is a way to denote that something happened to this map element. For example when using the Map.drawLines() method all new geometry will be marked.","title":"Working with map elements"},{"location":"gettingstarted/#creating-new-geometry","text":"New map geometry can be created with the drawLines() method of the Map object. It accepts an array of coordinates in map space. The coordinates can either by instances of Vector2D , Vector3D , or an array of numbers. Example 1: Map.drawLines([ new Vector2D(0, 0), new Vector2D(64, 0), new Vector2D(64, 64), new Vector2D(0, 64), new Vector2D(0, 0) ]); Example 2: Map.drawLines([ [ 0, 0 ], [ 64, 0 ], [ 64, 64 ], [ 0, 64 ], [ 0, 0 ] ]); Both examples are equivalent. The advantage of using Vector2D or Vector3D is that they have many math related methods built-in. Another method to draw geometry is using the Pen class - which itself is implemented as a library written in JavaScript. It's inspired by the DoomBuilder X class of the same name. It provides some quality of life features, since it creates coordinates relative to the current position - just like moving a pen around a sheet of paper, or Turtle graphics . Naive implementation of the above example using the Pen class: let p = new Pen(); p.moveTo([0, 0]); p.drawVertex(); p.moveTo([64, 0]); p.drawVertex(); p.moveTo([64, 64]); p.drawVertex(); p.moveTo([0, 64]); p.drawVertex(); p.finishDrawing(); Using the strenghts of the Pen class: let p = new Pen([0, 0]); for(let i=0; i < 4; i++) { p.drawVertex(); p.moveForward(64); p.turnRight(); } p.finishDrawing();","title":"Creating new geometry"},{"location":"gettingstarted/#ending-scripts-prematurely","text":"Normally a script ends when the last instruction is executed. But there can be situations where you want to end a script early. exit() : this global function ends the script with success. It can optionally take a string argument that is shown in the status bar upon ending the script die() : this global function ends the script with a failure. This means that it will undo any changes the script has made. It can optionally take a string argument that is shown in the status bar upon ending the script throw : throws an exception. Only ends the script if it's not caught in a try / catch block. If not caught it'll end the script with a failure. This means that it will undo any changes the script has made. The string given as a parameter is shown in the status bar upon ending the script","title":"Ending scripts prematurely"},{"location":"gettingstarted/#communicating-with-the-user","text":"Sometimes you might want to let the script directly communicate with the user. To do that there are two global functions, showMessage() and showMessageYesNo() . showMessage() : shows a message box with an \"OK\" button and the text given as the parameter showMessage('Hello, world!'); showMessageYesNo() : shows a message box with an \"Yes\" and \"No\" button and the text given as the parameter. Returns true if the \"Yes\" button was clicked, and false if the \"No\" button was clicked if(showMessageYesNo('Are you sure you want to replace all imps with Arch-Viles? That\\'s not remotely fair!')) { Map.getThings().filter(t => t.type == 3001).forEach(t => t.type=64); }","title":"Communicating with the user"}]}